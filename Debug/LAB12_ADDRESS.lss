
LAB12_ADDRESS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a10  00000aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  00000aa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000591  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035c  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e6  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000474  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
Parameter:
   Streng: Pointer to the string. 

*************************************************************************/
void SendString(char* Streng)
{
   0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  // Repeat untill zero-termination
  while (*Streng != 0)
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

*************************************************************************/
void SendString(char* Streng)
{
  // Repeat untill zero-termination
  while (*Streng != 0)
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_10>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_13>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	7d 01       	movw	r14, r26
  56:	94 01       	movw	r18, r8
  58:	ab 01       	movw	r20, r22
  5a:	c2 01       	movw	r24, r4
  5c:	d9 01       	movw	r26, r18
  5e:	f0 01       	movw	r30, r0
  60:	07 02       	muls	r16, r23
  62:	1e 02       	muls	r17, r30
  64:	35 02       	muls	r19, r21
  66:	be 02       	muls	r27, r30
  68:	be 02       	muls	r27, r30
  6a:	be 02       	muls	r27, r30
  6c:	be 02       	muls	r27, r30
  6e:	be 02       	muls	r27, r30
  70:	be 02       	muls	r27, r30
  72:	be 02       	muls	r27, r30
  74:	be 02       	muls	r27, r30
  76:	be 02       	muls	r27, r30
  78:	be 02       	muls	r27, r30
  7a:	be 02       	muls	r27, r30
  7c:	be 02       	muls	r27, r30
  7e:	be 02       	muls	r27, r30
  80:	be 02       	muls	r27, r30
  82:	be 02       	muls	r27, r30
  84:	be 02       	muls	r27, r30
  86:	be 02       	muls	r27, r30
  88:	be 02       	muls	r27, r30
  8a:	be 02       	muls	r27, r30
  8c:	be 02       	muls	r27, r30
  8e:	be 02       	muls	r27, r30
  90:	be 02       	muls	r27, r30
  92:	be 02       	muls	r27, r30
  94:	be 02       	muls	r27, r30
  96:	be 02       	muls	r27, r30
  98:	be 02       	muls	r27, r30
  9a:	be 02       	muls	r27, r30
  9c:	be 02       	muls	r27, r30
  9e:	be 02       	muls	r27, r30
  a0:	be 02       	muls	r27, r30
  a2:	be 02       	muls	r27, r30
  a4:	be 02       	muls	r27, r30
  a6:	be 02       	muls	r27, r30
  a8:	be 02       	muls	r27, r30
  aa:	be 02       	muls	r27, r30
  ac:	be 02       	muls	r27, r30
  ae:	be 02       	muls	r27, r30
  b0:	be 02       	muls	r27, r30
  b2:	be 02       	muls	r27, r30
  b4:	4c 02       	muls	r20, r28
  b6:	63 02       	muls	r22, r19
  b8:	7a 02       	muls	r23, r26
  ba:	91 02       	muls	r25, r17
  bc:	a8 02       	muls	r26, r24
  be:	ca 02       	muls	r28, r26
  c0:	e1 02       	muls	r30, r17
  c2:	f8 02       	muls	r31, r24
  c4:	0f 03       	fmul	r16, r23
  c6:	26 03       	mulsu	r18, r22
  c8:	3d 03       	fmul	r19, r21
  ca:	54 03       	mulsu	r21, r20
  cc:	6b 03       	fmul	r22, r19
  ce:	82 03       	fmuls	r16, r18
  d0:	22 04       	cpc	r2, r2
  d2:	22 04       	cpc	r2, r2
  d4:	22 04       	cpc	r2, r2
  d6:	22 04       	cpc	r2, r2
  d8:	22 04       	cpc	r2, r2
  da:	22 04       	cpc	r2, r2
  dc:	22 04       	cpc	r2, r2
  de:	22 04       	cpc	r2, r2
  e0:	22 04       	cpc	r2, r2
  e2:	22 04       	cpc	r2, r2
  e4:	22 04       	cpc	r2, r2
  e6:	22 04       	cpc	r2, r2
  e8:	22 04       	cpc	r2, r2
  ea:	22 04       	cpc	r2, r2
  ec:	22 04       	cpc	r2, r2
  ee:	22 04       	cpc	r2, r2
  f0:	22 04       	cpc	r2, r2
  f2:	22 04       	cpc	r2, r2
  f4:	22 04       	cpc	r2, r2
  f6:	22 04       	cpc	r2, r2
  f8:	22 04       	cpc	r2, r2
  fa:	22 04       	cpc	r2, r2
  fc:	22 04       	cpc	r2, r2
  fe:	22 04       	cpc	r2, r2
 100:	22 04       	cpc	r2, r2
 102:	22 04       	cpc	r2, r2
 104:	22 04       	cpc	r2, r2
 106:	22 04       	cpc	r2, r2
 108:	22 04       	cpc	r2, r2
 10a:	22 04       	cpc	r2, r2
 10c:	22 04       	cpc	r2, r2
 10e:	22 04       	cpc	r2, r2
 110:	22 04       	cpc	r2, r2
 112:	22 04       	cpc	r2, r2
 114:	22 04       	cpc	r2, r2
 116:	22 04       	cpc	r2, r2
 118:	22 04       	cpc	r2, r2
 11a:	22 04       	cpc	r2, r2
 11c:	22 04       	cpc	r2, r2
 11e:	99 03       	fmulsu	r17, r17
 120:	b0 03       	fmuls	r19, r16
 122:	c7 03       	fmuls	r20, r23
 124:	de 03       	fmulsu	r21, r22
 126:	f5 03       	fmuls	r23, r21
 128:	0c 04       	cpc	r0, r12

0000012a <__ctors_end>:
 12a:	11 24       	eor	r1, r1
 12c:	1f be       	out	0x3f, r1	; 63
 12e:	cf e5       	ldi	r28, 0x5F	; 95
 130:	d8 e0       	ldi	r29, 0x08	; 8
 132:	de bf       	out	0x3e, r29	; 62
 134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	a0 e6       	ldi	r26, 0x60	; 96
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e0 e1       	ldi	r30, 0x10	; 16
 13e:	fa e0       	ldi	r31, 0x0A	; 10
 140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
 142:	05 90       	lpm	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	a2 36       	cpi	r26, 0x62	; 98
 148:	b1 07       	cpc	r27, r17
 14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	a2 e6       	ldi	r26, 0x62	; 98
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a2 37       	cpi	r26, 0x72	; 114
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 3f 04 	call	0x87e	; 0x87e <main>
 160:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <__vector_3>:
hvis det er et 1 cycel og en 1 bit. sendes der et burst ellers sker der ingenting 
når der er sent et burst tælles send counteren en op og vi kikker på den næste plads
når 5 bit er sent sættes ready til 0 og vi stopper med at sende.
----------------------------------------------------------------------*/
ISR(INT2_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
flag++;
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 60 00 	sts	0x0060, r24
if(ready == 1)
 194:	80 91 6c 00 	lds	r24, 0x006C
 198:	90 91 6d 00 	lds	r25, 0x006D
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <__vector_3+0x3a>
 1a0:	68 c0       	rjmp	.+208    	; 0x272 <__vector_3+0x10a>
{
	if (flag % 2 == 1) // sikre at vi ikke sender et 1 og 0 i samme cycel
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	80 ff       	sbrs	r24, 0
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__vector_3+0x4a>
	{
		failsafe = 0;
 1aa:	10 92 71 00 	sts	0x0071, r1
 1ae:	10 92 70 00 	sts	0x0070, r1
	}

    if(flag % 2 == 1)  // 1 cycel
 1b2:	80 91 60 00 	lds	r24, 0x0060
 1b6:	80 ff       	sbrs	r24, 0
 1b8:	1d c0       	rjmp	.+58     	; 0x1f4 <__vector_3+0x8c>
    {
	    if (DataBuffer[sendcounter] == 1)
 1ba:	e0 91 6e 00 	lds	r30, 0x006E
 1be:	f0 91 6f 00 	lds	r31, 0x006F
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	ee 59       	subi	r30, 0x9E	; 158
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <__vector_3+0x8c>
	    {
		    Burst();
 1d2:	0e 94 b8 04 	call	0x970	; 0x970 <Burst>
		    sendcounter++;
 1d6:	80 91 6e 00 	lds	r24, 0x006E
 1da:	90 91 6f 00 	lds	r25, 0x006F
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 6f 00 	sts	0x006F, r25
 1e4:	80 93 6e 00 	sts	0x006E, r24
		    failsafe = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 71 00 	sts	0x0071, r25
 1f0:	80 93 70 00 	sts	0x0070, r24
		    //nothing
	    }
	    
    }

	if(flag % 2 == 0) // 0 cycel
 1f4:	80 91 60 00 	lds	r24, 0x0060
 1f8:	80 fd       	sbrc	r24, 0
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <__vector_3+0xce>
    {
		if (DataBuffer[sendcounter] == 0)
 1fc:	e0 91 6e 00 	lds	r30, 0x006E
 200:	f0 91 6f 00 	lds	r31, 0x006F
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	ee 59       	subi	r30, 0x9E	; 158
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	89 2b       	or	r24, r25
 212:	89 f4       	brne	.+34     	; 0x236 <__vector_3+0xce>
        {
				if (failsafe == 0)
 214:	80 91 70 00 	lds	r24, 0x0070
 218:	90 91 71 00 	lds	r25, 0x0071
 21c:	89 2b       	or	r24, r25
 21e:	59 f4       	brne	.+22     	; 0x236 <__vector_3+0xce>
				{
					Burst();
 220:	0e 94 b8 04 	call	0x970	; 0x970 <Burst>
					sendcounter++;
 224:	80 91 6e 00 	lds	r24, 0x006E
 228:	90 91 6f 00 	lds	r25, 0x006F
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 6f 00 	sts	0x006F, r25
 232:	80 93 6e 00 	sts	0x006E, r24
		{
			//nothing
		}
    }
       
    if (sendcounter == 5)
 236:	80 91 6e 00 	lds	r24, 0x006E
 23a:	90 91 6f 00 	lds	r25, 0x006F
 23e:	05 97       	sbiw	r24, 0x05	; 5
 240:	c1 f4       	brne	.+48     	; 0x272 <__vector_3+0x10a>
    {
		ready = 0;
 242:	10 92 6d 00 	sts	0x006D, r1
 246:	10 92 6c 00 	sts	0x006C, r1
		DataBuffer[0] = 0;
 24a:	10 92 63 00 	sts	0x0063, r1
 24e:	10 92 62 00 	sts	0x0062, r1
		DataBuffer[1] = 0;
 252:	10 92 65 00 	sts	0x0065, r1
 256:	10 92 64 00 	sts	0x0064, r1
		DataBuffer[2] = 0;
 25a:	10 92 67 00 	sts	0x0067, r1
 25e:	10 92 66 00 	sts	0x0066, r1
		DataBuffer[3] = 0;
 262:	10 92 69 00 	sts	0x0069, r1
 266:	10 92 68 00 	sts	0x0068, r1
		DataBuffer[4] = 0;
 26a:	10 92 6b 00 	sts	0x006B, r1
 26e:	10 92 6a 00 	sts	0x006A, r1
	}		
}
} 
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_13>:
 hvis den første char er ! eller ? 
 checkes der for om der skal tændes eller slukkes for lys
 derefter senden den et binær array til databuffern som skal sendes via zero crossing interrupts
 */
ISR (USART_RXC_vect)
{ 
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <__vector_13+0x28>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <__vector_13+0x2a>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	char Buffer[4];
	ReadString(&Buffer,ARRAY);
 2c2:	64 e0       	ldi	r22, 0x04	; 4
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 90 04 	call	0x920	; 0x920 <ReadString>
	if (Buffer[0] == '!' || Buffer[0] == '?')
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	81 32       	cpi	r24, 0x21	; 33
 2d2:	19 f0       	breq	.+6      	; 0x2da <__vector_13+0x46>
 2d4:	8f 33       	cpi	r24, 0x3F	; 63
 2d6:	09 f0       	breq	.+2      	; 0x2da <__vector_13+0x46>
 2d8:	bb c2       	rjmp	.+1398   	; 0x850 <__vector_13+0x5bc>
	{
		if (Buffer[2] == '0')
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	80 33       	cpi	r24, 0x30	; 48
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_13+0x4e>
 2e0:	b1 c2       	rjmp	.+1378   	; 0x844 <__vector_13+0x5b0>
		{
			switch (Buffer[1])
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	f1 97       	sbiw	r30, 0x31	; 49
 2ea:	e5 33       	cpi	r30, 0x35	; 53
 2ec:	f1 05       	cpc	r31, r1
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <__vector_13+0x5e>
 2f0:	45 c1       	rjmp	.+650    	; 0x57c <__vector_13+0x2e8>
 2f2:	e6 5d       	subi	r30, 0xD6	; 214
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__tablejump2__>
			{ 
				case '1' ://DataBuffer[5] = {0,0,0,1,1}; 
					DataBuffer[0] = 0;
 2fa:	10 92 63 00 	sts	0x0063, r1
 2fe:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 302:	10 92 65 00 	sts	0x0065, r1
 306:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 30a:	10 92 67 00 	sts	0x0067, r1
 30e:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 69 00 	sts	0x0069, r25
 31a:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1; 
 31e:	90 93 6b 00 	sts	0x006B, r25
 322:	80 93 6a 00 	sts	0x006A, r24
					break;
 326:	2a c1       	rjmp	.+596    	; 0x57c <__vector_13+0x2e8>

				case '2' ://DataBuffer[5] = {0,0,1,0,1}; 
					DataBuffer[0] = 0;
 328:	10 92 63 00 	sts	0x0063, r1
 32c:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 330:	10 92 65 00 	sts	0x0065, r1
 334:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 67 00 	sts	0x0067, r25
 340:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 344:	10 92 69 00 	sts	0x0069, r1
 348:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;				 
 34c:	90 93 6b 00 	sts	0x006B, r25
 350:	80 93 6a 00 	sts	0x006A, r24
					break;
 354:	13 c1       	rjmp	.+550    	; 0x57c <__vector_13+0x2e8>

				case '3' ://DataBuffer[5] = {0,0,1,1,1};  
					DataBuffer[0] = 0;
 356:	10 92 63 00 	sts	0x0063, r1
 35a:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 35e:	10 92 65 00 	sts	0x0065, r1
 362:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 67 00 	sts	0x0067, r25
 36e:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 372:	90 93 69 00 	sts	0x0069, r25
 376:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 37a:	90 93 6b 00 	sts	0x006B, r25
 37e:	80 93 6a 00 	sts	0x006A, r24
					break;
 382:	fc c0       	rjmp	.+504    	; 0x57c <__vector_13+0x2e8>

				case '4' ://DataBuffer[5] = {0,1,0,0,1}; 
					DataBuffer[0] = 0;
 384:	10 92 63 00 	sts	0x0063, r1
 388:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 65 00 	sts	0x0065, r25
 394:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 398:	10 92 67 00 	sts	0x0067, r1
 39c:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 3a0:	10 92 69 00 	sts	0x0069, r1
 3a4:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 3a8:	90 93 6b 00 	sts	0x006B, r25
 3ac:	80 93 6a 00 	sts	0x006A, r24
					break;
 3b0:	e5 c0       	rjmp	.+458    	; 0x57c <__vector_13+0x2e8>

				case '5' ://DataBuffer[5] = {0,1,0,1,1}; 
					DataBuffer[0] = 0;
 3b2:	10 92 63 00 	sts	0x0063, r1
 3b6:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 65 00 	sts	0x0065, r25
 3c2:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 3c6:	10 92 67 00 	sts	0x0067, r1
 3ca:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 3ce:	90 93 69 00 	sts	0x0069, r25
 3d2:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 3d6:	90 93 6b 00 	sts	0x006B, r25
 3da:	80 93 6a 00 	sts	0x006A, r24
					break;
 3de:	ce c0       	rjmp	.+412    	; 0x57c <__vector_13+0x2e8>

				case '6' ://DataBuffer[5] = {0,1,1,0,1};  
					DataBuffer[0] = 0;
 3e0:	10 92 63 00 	sts	0x0063, r1
 3e4:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	90 93 65 00 	sts	0x0065, r25
 3f0:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 3f4:	90 93 67 00 	sts	0x0067, r25
 3f8:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 3fc:	10 92 69 00 	sts	0x0069, r1
 400:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 404:	90 93 6b 00 	sts	0x006B, r25
 408:	80 93 6a 00 	sts	0x006A, r24
					break;
 40c:	b7 c0       	rjmp	.+366    	; 0x57c <__vector_13+0x2e8>

				case '7' ://DataBuffer[5] = {0,1,1,1,1}; 
					DataBuffer[0] = 0;
 40e:	10 92 63 00 	sts	0x0063, r1
 412:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 65 00 	sts	0x0065, r25
 41e:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 422:	90 93 67 00 	sts	0x0067, r25
 426:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 42a:	90 93 69 00 	sts	0x0069, r25
 42e:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 432:	90 93 6b 00 	sts	0x006B, r25
 436:	80 93 6a 00 	sts	0x006A, r24
					break;
 43a:	a0 c0       	rjmp	.+320    	; 0x57c <__vector_13+0x2e8>

				case '8' :// DataBuffer[5] = {1,0,0,0,1};  
					DataBuffer[0] = 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 63 00 	sts	0x0063, r25
 444:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 448:	10 92 65 00 	sts	0x0065, r1
 44c:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 450:	10 92 67 00 	sts	0x0067, r1
 454:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 458:	10 92 69 00 	sts	0x0069, r1
 45c:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 460:	90 93 6b 00 	sts	0x006B, r25
 464:	80 93 6a 00 	sts	0x006A, r24
					break;
 468:	89 c0       	rjmp	.+274    	; 0x57c <__vector_13+0x2e8>

				case '9' ://DataBuffer[5] = {1,0,0,1,1};  
					DataBuffer[0] = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	90 93 63 00 	sts	0x0063, r25
 472:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 476:	10 92 65 00 	sts	0x0065, r1
 47a:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 47e:	10 92 67 00 	sts	0x0067, r1
 482:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 486:	90 93 69 00 	sts	0x0069, r25
 48a:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 48e:	90 93 6b 00 	sts	0x006B, r25
 492:	80 93 6a 00 	sts	0x006A, r24
					break;
 496:	72 c0       	rjmp	.+228    	; 0x57c <__vector_13+0x2e8>

				case 'a' ://DataBuffer[5] = {1,0,1,0,1}; 
					DataBuffer[0] = 1;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 63 00 	sts	0x0063, r25
 4a0:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 4a4:	10 92 65 00 	sts	0x0065, r1
 4a8:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 4ac:	90 93 67 00 	sts	0x0067, r25
 4b0:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 4b4:	10 92 69 00 	sts	0x0069, r1
 4b8:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 4bc:	90 93 6b 00 	sts	0x006B, r25
 4c0:	80 93 6a 00 	sts	0x006A, r24
					break;
 4c4:	5b c0       	rjmp	.+182    	; 0x57c <__vector_13+0x2e8>

				case 'b' ://DataBuffer[5] = {1,0,1,1,1};  
					DataBuffer[0] = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	90 93 63 00 	sts	0x0063, r25
 4ce:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 4d2:	10 92 65 00 	sts	0x0065, r1
 4d6:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 4da:	90 93 67 00 	sts	0x0067, r25
 4de:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 4e2:	90 93 69 00 	sts	0x0069, r25
 4e6:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 4ea:	90 93 6b 00 	sts	0x006B, r25
 4ee:	80 93 6a 00 	sts	0x006A, r24
					break;
 4f2:	44 c0       	rjmp	.+136    	; 0x57c <__vector_13+0x2e8>

				case 'c' ://DataBuffer[5] = {1,1,0,0,1}; 
					DataBuffer[0] = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 63 00 	sts	0x0063, r25
 4fc:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 500:	90 93 65 00 	sts	0x0065, r25
 504:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 508:	10 92 67 00 	sts	0x0067, r1
 50c:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 510:	10 92 69 00 	sts	0x0069, r1
 514:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 518:	90 93 6b 00 	sts	0x006B, r25
 51c:	80 93 6a 00 	sts	0x006A, r24
					break;
 520:	2d c0       	rjmp	.+90     	; 0x57c <__vector_13+0x2e8>

				case 'd' ://DataBuffer[5] = {1,1,0,1,1};
			 
					DataBuffer[0] = 1;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	90 93 63 00 	sts	0x0063, r25
 52a:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 52e:	90 93 65 00 	sts	0x0065, r25
 532:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 536:	10 92 67 00 	sts	0x0067, r1
 53a:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 53e:	90 93 69 00 	sts	0x0069, r25
 542:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 1;
 546:	90 93 6b 00 	sts	0x006B, r25
 54a:	80 93 6a 00 	sts	0x006A, r24
					break;
 54e:	16 c0       	rjmp	.+44     	; 0x57c <__vector_13+0x2e8>

				case 'e' :// DataBuffer[5] = {1,1,1,0,1};  
					DataBuffer[0] = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 63 00 	sts	0x0063, r25
 558:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 55c:	90 93 65 00 	sts	0x0065, r25
 560:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 564:	90 93 67 00 	sts	0x0067, r25
 568:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 56c:	10 92 69 00 	sts	0x0069, r1
 570:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 1;
 574:	90 93 6b 00 	sts	0x006B, r25
 578:	80 93 6a 00 	sts	0x006A, r24
			}
		}

		if (Buffer[2] == '0')
		{
			switch (Buffer[1])
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	f1 97       	sbiw	r30, 0x31	; 49
 584:	e6 33       	cpi	r30, 0x36	; 54
 586:	f1 05       	cpc	r31, r1
 588:	08 f0       	brcs	.+2      	; 0x58c <__vector_13+0x2f8>
 58a:	5c c1       	rjmp	.+696    	; 0x844 <__vector_13+0x5b0>
 58c:	e1 5a       	subi	r30, 0xA1	; 161
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__tablejump2__>
			{
				case '1' ://DataBuffer[5] = {0,0,0,1,0};
					DataBuffer[0] = 0;
 594:	10 92 63 00 	sts	0x0063, r1
 598:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 59c:	10 92 65 00 	sts	0x0065, r1
 5a0:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 5a4:	10 92 67 00 	sts	0x0067, r1
 5a8:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	90 93 69 00 	sts	0x0069, r25
 5b4:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 5b8:	10 92 6b 00 	sts	0x006B, r1
 5bc:	10 92 6a 00 	sts	0x006A, r1
					break;
 5c0:	41 c1       	rjmp	.+642    	; 0x844 <__vector_13+0x5b0>

				case '2' ://DataBuffer[5] = {0,0,1,0,0};
					DataBuffer[0] = 0;
 5c2:	10 92 63 00 	sts	0x0063, r1
 5c6:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 5ca:	10 92 65 00 	sts	0x0065, r1
 5ce:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	90 93 67 00 	sts	0x0067, r25
 5da:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 5de:	10 92 69 00 	sts	0x0069, r1
 5e2:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 5e6:	10 92 6b 00 	sts	0x006B, r1
 5ea:	10 92 6a 00 	sts	0x006A, r1
					break;
 5ee:	2a c1       	rjmp	.+596    	; 0x844 <__vector_13+0x5b0>

				case '3' ://DataBuffer[5] = {0,0,1,1,0};
					DataBuffer[0] = 0;
 5f0:	10 92 63 00 	sts	0x0063, r1
 5f4:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 0;
 5f8:	10 92 65 00 	sts	0x0065, r1
 5fc:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	90 93 67 00 	sts	0x0067, r25
 608:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 60c:	90 93 69 00 	sts	0x0069, r25
 610:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 614:	10 92 6b 00 	sts	0x006B, r1
 618:	10 92 6a 00 	sts	0x006A, r1
					break;
 61c:	13 c1       	rjmp	.+550    	; 0x844 <__vector_13+0x5b0>

				case '4' ://DataBuffer[5] = {0,1,0,0,0};
					DataBuffer[0] = 0;
 61e:	10 92 63 00 	sts	0x0063, r1
 622:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	90 93 65 00 	sts	0x0065, r25
 62e:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 632:	10 92 67 00 	sts	0x0067, r1
 636:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 63a:	10 92 69 00 	sts	0x0069, r1
 63e:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 642:	10 92 6b 00 	sts	0x006B, r1
 646:	10 92 6a 00 	sts	0x006A, r1
					break;
 64a:	fc c0       	rjmp	.+504    	; 0x844 <__vector_13+0x5b0>

				case '5' ://DataBuffer[5] = {0,1,0,1,0};
					DataBuffer[0] = 0;
 64c:	10 92 63 00 	sts	0x0063, r1
 650:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	90 93 65 00 	sts	0x0065, r25
 65c:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 660:	10 92 67 00 	sts	0x0067, r1
 664:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 668:	90 93 69 00 	sts	0x0069, r25
 66c:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 670:	10 92 6b 00 	sts	0x006B, r1
 674:	10 92 6a 00 	sts	0x006A, r1
					break;
 678:	e5 c0       	rjmp	.+458    	; 0x844 <__vector_13+0x5b0>

				case '6' ://DataBuffer[5] = {0,1,1,0,0};
					DataBuffer[0] = 0;
 67a:	10 92 63 00 	sts	0x0063, r1
 67e:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	90 93 65 00 	sts	0x0065, r25
 68a:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 68e:	90 93 67 00 	sts	0x0067, r25
 692:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 696:	10 92 69 00 	sts	0x0069, r1
 69a:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 69e:	10 92 6b 00 	sts	0x006B, r1
 6a2:	10 92 6a 00 	sts	0x006A, r1
					break;
 6a6:	ce c0       	rjmp	.+412    	; 0x844 <__vector_13+0x5b0>

				case '7' ://DataBuffer[5] = {0,1,1,1,0};
					DataBuffer[0] = 0;
 6a8:	10 92 63 00 	sts	0x0063, r1
 6ac:	10 92 62 00 	sts	0x0062, r1
					DataBuffer[1] = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	90 93 65 00 	sts	0x0065, r25
 6b8:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 6bc:	90 93 67 00 	sts	0x0067, r25
 6c0:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 6c4:	90 93 69 00 	sts	0x0069, r25
 6c8:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 6cc:	10 92 6b 00 	sts	0x006B, r1
 6d0:	10 92 6a 00 	sts	0x006A, r1
					break;
 6d4:	b7 c0       	rjmp	.+366    	; 0x844 <__vector_13+0x5b0>

				case '8' :// DataBuffer[5] = {1,0,0,0,0};
					DataBuffer[0] = 1;
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	90 93 63 00 	sts	0x0063, r25
 6de:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 6e2:	10 92 65 00 	sts	0x0065, r1
 6e6:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 6ea:	10 92 67 00 	sts	0x0067, r1
 6ee:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 6f2:	10 92 69 00 	sts	0x0069, r1
 6f6:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 6fa:	10 92 6b 00 	sts	0x006B, r1
 6fe:	10 92 6a 00 	sts	0x006A, r1
					break;
 702:	a0 c0       	rjmp	.+320    	; 0x844 <__vector_13+0x5b0>

				case '9' ://DataBuffer[5] = {1,0,0,1,0};
					DataBuffer[0] = 1;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 63 00 	sts	0x0063, r25
 70c:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 710:	10 92 65 00 	sts	0x0065, r1
 714:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 0;
 718:	10 92 67 00 	sts	0x0067, r1
 71c:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 720:	90 93 69 00 	sts	0x0069, r25
 724:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 728:	10 92 6b 00 	sts	0x006B, r1
 72c:	10 92 6a 00 	sts	0x006A, r1
					break;
 730:	89 c0       	rjmp	.+274    	; 0x844 <__vector_13+0x5b0>

				case 'a' ://DataBuffer[5] = {1,0,1,0,0};
					DataBuffer[0] = 1;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	90 93 63 00 	sts	0x0063, r25
 73a:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 73e:	10 92 65 00 	sts	0x0065, r1
 742:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 746:	90 93 67 00 	sts	0x0067, r25
 74a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 74e:	10 92 69 00 	sts	0x0069, r1
 752:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 756:	10 92 6b 00 	sts	0x006B, r1
 75a:	10 92 6a 00 	sts	0x006A, r1
					break;
 75e:	72 c0       	rjmp	.+228    	; 0x844 <__vector_13+0x5b0>

				case 'b' ://DataBuffer[5] = {1,0,1,1,0};
					DataBuffer[0] = 1;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	90 93 63 00 	sts	0x0063, r25
 768:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 0;
 76c:	10 92 65 00 	sts	0x0065, r1
 770:	10 92 64 00 	sts	0x0064, r1
					DataBuffer[2] = 1;
 774:	90 93 67 00 	sts	0x0067, r25
 778:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 77c:	90 93 69 00 	sts	0x0069, r25
 780:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 784:	10 92 6b 00 	sts	0x006B, r1
 788:	10 92 6a 00 	sts	0x006A, r1
					break;
 78c:	5b c0       	rjmp	.+182    	; 0x844 <__vector_13+0x5b0>

				case 'c' ://DataBuffer[5] = {1,1,0,0,0};
					DataBuffer[0] = 1;
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	90 93 63 00 	sts	0x0063, r25
 796:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 79a:	90 93 65 00 	sts	0x0065, r25
 79e:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 7a2:	10 92 67 00 	sts	0x0067, r1
 7a6:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 0;
 7aa:	10 92 69 00 	sts	0x0069, r1
 7ae:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 7b2:	10 92 6b 00 	sts	0x006B, r1
 7b6:	10 92 6a 00 	sts	0x006A, r1
					break;
 7ba:	44 c0       	rjmp	.+136    	; 0x844 <__vector_13+0x5b0>

				case 'd' ://DataBuffer[5] = {1,1,0,1,0};
					DataBuffer[0] = 1;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	90 93 63 00 	sts	0x0063, r25
 7c4:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 7c8:	90 93 65 00 	sts	0x0065, r25
 7cc:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 0;
 7d0:	10 92 67 00 	sts	0x0067, r1
 7d4:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[3] = 1;
 7d8:	90 93 69 00 	sts	0x0069, r25
 7dc:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 7e0:	10 92 6b 00 	sts	0x006B, r1
 7e4:	10 92 6a 00 	sts	0x006A, r1
					break;
 7e8:	2d c0       	rjmp	.+90     	; 0x844 <__vector_13+0x5b0>

				case 'e' :// DataBuffer[5] = {1,1,1,0,0};
					DataBuffer[0] = 1;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	90 93 63 00 	sts	0x0063, r25
 7f2:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 7f6:	90 93 65 00 	sts	0x0065, r25
 7fa:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 7fe:	90 93 67 00 	sts	0x0067, r25
 802:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 0;
 806:	10 92 69 00 	sts	0x0069, r1
 80a:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[4] = 0;
 80e:	10 92 6b 00 	sts	0x006B, r1
 812:	10 92 6a 00 	sts	0x006A, r1
					break;
 816:	16 c0       	rjmp	.+44     	; 0x844 <__vector_13+0x5b0>

				case 'f' ://DataBuffer[5] = {1,1,1,1,0};
					DataBuffer[0] = 1;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	90 93 63 00 	sts	0x0063, r25
 820:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = 1;
 824:	90 93 65 00 	sts	0x0065, r25
 828:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[2] = 1;
 82c:	90 93 67 00 	sts	0x0067, r25
 830:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[3] = 1;
 834:	90 93 69 00 	sts	0x0069, r25
 838:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[4] = 0;
 83c:	10 92 6b 00 	sts	0x006B, r1
 840:	10 92 6a 00 	sts	0x006A, r1
					break;
			}
		}
	ready = 1;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	90 93 6d 00 	sts	0x006D, r25
 84c:	80 93 6c 00 	sts	0x006C, r24
	}

}
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <main>:


int main()
{
	// Initialize USART (with RX interrupt enable)
	InitUART(9600, 8, 1);
 87e:	21 e0       	ldi	r18, 0x01	; 1
 880:	48 e0       	ldi	r20, 0x08	; 8
 882:	60 e8       	ldi	r22, 0x80	; 128
 884:	75 e2       	ldi	r23, 0x25	; 37
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 4b 04 	call	0x896	; 0x896 <InitUART>
	// Initialize CTC 
	InitAtmel();
 88e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <InitAtmel>
	// Global interrupt enable
	sei();
 892:	78 94       	sei
 894:	ff cf       	rjmp	.-2      	; 0x894 <main+0x16>

00000896 <InitUART>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char RX_int  )
{
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	52 2f       	mov	r21, r18
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 89c:	8b 01       	movw	r16, r22
 89e:	9c 01       	movw	r18, r24
 8a0:	0e 56       	subi	r16, 0x6E	; 110
 8a2:	11 09       	sbc	r17, r1
 8a4:	21 09       	sbc	r18, r1
 8a6:	31 09       	sbc	r19, r1
 8a8:	03 39       	cpi	r16, 0x93	; 147
 8aa:	11 4c       	sbci	r17, 0xC1	; 193
 8ac:	21 40       	sbci	r18, 0x01	; 1
 8ae:	31 05       	cpc	r19, r1
 8b0:	80 f5       	brcc	.+96     	; 0x912 <InitUART+0x7c>
 8b2:	2b ef       	ldi	r18, 0xFB	; 251
 8b4:	24 0f       	add	r18, r20
 8b6:	24 30       	cpi	r18, 0x04	; 4
 8b8:	60 f5       	brcc	.+88     	; 0x912 <InitUART+0x7c>
  { 
    // "Normal" clock, no multiprocesser mode (= default)
    UCSRA = 0b00100000;
 8ba:	20 e2       	ldi	r18, 0x20	; 32
 8bc:	2b b9       	out	0x0b, r18	; 11
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRB = 0b00011000;
 8be:	28 e1       	ldi	r18, 0x18	; 24
 8c0:	2a b9       	out	0x0a, r18	; 10
    // Enable RX interrupts if wanted
    if (RX_int)
 8c2:	51 11       	cpse	r21, r1
      UCSRB |= 0b10000000;
 8c4:	57 9a       	sbi	0x0a, 7	; 10
    // Asynchronous operation, 1 stop bit, no parity
    // Bit7 always has to be 1
    // Bit 2 and bit 1 controlles the number of databits
    UCSRC = 0b10000000 | (DataBit-5)<<1;
 8c6:	24 2f       	mov	r18, r20
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	25 50       	subi	r18, 0x05	; 5
 8cc:	31 09       	sbc	r19, r1
 8ce:	22 0f       	add	r18, r18
 8d0:	33 1f       	adc	r19, r19
 8d2:	20 68       	ori	r18, 0x80	; 128
 8d4:	20 bd       	out	0x20, r18	; 32
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers seperately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
 8d6:	dc 01       	movw	r26, r24
 8d8:	cb 01       	movw	r24, r22
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	aa 1f       	adc	r26, r26
 8e0:	bb 1f       	adc	r27, r27
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	9c 01       	movw	r18, r24
 8ec:	ad 01       	movw	r20, r26
 8ee:	22 0f       	add	r18, r18
 8f0:	33 1f       	adc	r19, r19
 8f2:	44 1f       	adc	r20, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	44 1f       	adc	r20, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	70 e4       	ldi	r23, 0x40	; 64
 902:	88 e3       	ldi	r24, 0x38	; 56
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 90a:	21 50       	subi	r18, 0x01	; 1
 90c:	31 09       	sbc	r19, r1
    // Write upper part of UBRR
    UBRRH = TempUBRR >> 8;
 90e:	30 bd       	out	0x20, r19	; 32
    // Write lower part of UBRR
    UBRRL = TempUBRR;
 910:	29 b9       	out	0x09, r18	; 9
  }  
}
 912:	1f 91       	pop	r17
 914:	0f 91       	pop	r16
 916:	08 95       	ret

00000918 <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSRA & (1<<7)) == 0 )
 918:	5f 9b       	sbis	0x0b, 7	; 11
 91a:	fe cf       	rjmp	.-4      	; 0x918 <ReadChar>
  {}                        
  // Then return it
  return UDR;
 91c:	8c b1       	in	r24, 0x0c	; 12
}
 91e:	08 95       	ret

00000920 <ReadString>:

void ReadString(char* Buffer, int MaxLenght)
{
 920:	ef 92       	push	r14
 922:	ff 92       	push	r15
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	8c 01       	movw	r16, r24
 92e:	7b 01       	movw	r14, r22
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
 930:	0e 94 8c 04 	call	0x918	; 0x918 <ReadChar>
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 934:	8d 30       	cpi	r24, 0x0D	; 13
 936:	99 f0       	breq	.+38     	; 0x95e <ReadString+0x3e>
 938:	1e 14       	cp	r1, r14
 93a:	1f 04       	cpc	r1, r15
 93c:	84 f4       	brge	.+32     	; 0x95e <ReadString+0x3e>
 93e:	f8 01       	movw	r30, r16
 940:	e0 0e       	add	r14, r16
 942:	f1 1e       	adc	r15, r17
 944:	ef 01       	movw	r28, r30
 946:	21 96       	adiw	r28, 0x01	; 1
 948:	8e 01       	movw	r16, r28
	{
		*Buffer++ = NextChar;
 94a:	80 83       	st	Z, r24
		StringLenght++;
		NextChar = ReadChar();
 94c:	0e 94 8c 04 	call	0x918	; 0x918 <ReadChar>
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 950:	8d 30       	cpi	r24, 0x0D	; 13
 952:	29 f0       	breq	.+10     	; 0x95e <ReadString+0x3e>
 954:	ce 15       	cp	r28, r14
 956:	df 05       	cpc	r29, r15
 958:	11 f0       	breq	.+4      	; 0x95e <ReadString+0x3e>
 95a:	fe 01       	movw	r30, r28
 95c:	f3 cf       	rjmp	.-26     	; 0x944 <ReadString+0x24>
	{
		*Buffer++ = NextChar;
		StringLenght++;
		NextChar = ReadChar();
	}
	*Buffer = '\0';
 95e:	f8 01       	movw	r30, r16
 960:	10 82       	st	Z, r1
}
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	08 95       	ret

00000970 <Burst>:
----------------------------------------------------------------------*/

 
void Burst(void)
{
    DDRB |=(1<<PB3);
 970:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 972:	8d ee       	ldi	r24, 0xED	; 237
 974:	92 e0       	ldi	r25, 0x02	; 2
 976:	01 97       	sbiw	r24, 0x01	; 1
 978:	f1 f7       	brne	.-4      	; 0x976 <Burst+0x6>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <Burst+0xc>
 97c:	00 00       	nop
    _delay_ms(3);
	DDRB |=(0<<PB3);	   
 97e:	87 b3       	in	r24, 0x17	; 23
 980:	87 bb       	out	0x17, r24	; 23
 982:	08 95       	ret

00000984 <__vector_10>:
 1200005
 
---------------------------------------------------------------------*/
#define OCR0_VALUE 14
 ISR(TIMER0_COMP_vect)
 {
 984:	1f 92       	push	r1
 986:	0f 92       	push	r0
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	0f 92       	push	r0
 98c:	11 24       	eor	r1, r1
 98e:	8f 93       	push	r24
         OCR0 = (uint8_t)OCR0_VALUE;
 990:	8e e0       	ldi	r24, 0x0E	; 14
 992:	8c bf       	out	0x3c, r24	; 60
 }
 994:	8f 91       	pop	r24
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <InitAtmel>:
CTC - couter initial value
CTC - counter compare interrupt
---------------------------------------------------------------------*/
 void InitAtmel(void)
 {
	 DDRB |= (0<<PB2) | (0<<PB0);
 9a0:	87 b3       	in	r24, 0x17	; 23
 9a2:	87 bb       	out	0x17, r24	; 23
	 MCUCSR = 0b01000000;
 9a4:	80 e4       	ldi	r24, 0x40	; 64
 9a6:	84 bf       	out	0x34, r24	; 52
	 GICR |= 0b00100000;
 9a8:	8b b7       	in	r24, 0x3b	; 59
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	8b bf       	out	0x3b, r24	; 59
	 TCCR0 = 0b01101001;
 9ae:	89 e6       	ldi	r24, 0x69	; 105
 9b0:	83 bf       	out	0x33, r24	; 51
	 TCNT0 = 0;
 9b2:	12 be       	out	0x32, r1	; 50
	 TIMSK |=(1<<OCIE0);
 9b4:	89 b7       	in	r24, 0x39	; 57
 9b6:	82 60       	ori	r24, 0x02	; 2
 9b8:	89 bf       	out	0x39, r24	; 57
 9ba:	08 95       	ret

000009bc <__udivmodsi4>:
 9bc:	a1 e2       	ldi	r26, 0x21	; 33
 9be:	1a 2e       	mov	r1, r26
 9c0:	aa 1b       	sub	r26, r26
 9c2:	bb 1b       	sub	r27, r27
 9c4:	fd 01       	movw	r30, r26
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__udivmodsi4_ep>

000009c8 <__udivmodsi4_loop>:
 9c8:	aa 1f       	adc	r26, r26
 9ca:	bb 1f       	adc	r27, r27
 9cc:	ee 1f       	adc	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	a2 17       	cp	r26, r18
 9d2:	b3 07       	cpc	r27, r19
 9d4:	e4 07       	cpc	r30, r20
 9d6:	f5 07       	cpc	r31, r21
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__udivmodsi4_ep>
 9da:	a2 1b       	sub	r26, r18
 9dc:	b3 0b       	sbc	r27, r19
 9de:	e4 0b       	sbc	r30, r20
 9e0:	f5 0b       	sbc	r31, r21

000009e2 <__udivmodsi4_ep>:
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	1a 94       	dec	r1
 9ec:	69 f7       	brne	.-38     	; 0x9c8 <__udivmodsi4_loop>
 9ee:	60 95       	com	r22
 9f0:	70 95       	com	r23
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	bd 01       	movw	r22, r26
 9fc:	cf 01       	movw	r24, r30
 9fe:	08 95       	ret

00000a00 <__tablejump2__>:
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31

00000a04 <__tablejump__>:
 a04:	05 90       	lpm	r0, Z+
 a06:	f4 91       	lpm	r31, Z
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 94       	ijmp

00000a0c <_exit>:
 a0c:	f8 94       	cli

00000a0e <__stop_program>:
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__stop_program>
