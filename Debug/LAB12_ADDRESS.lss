
LAB12_ADDRESS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000810  000008a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  000008a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000591  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035c  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ff  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000474  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
Parameter:
   Streng: Pointer to the string. 

*************************************************************************/
void SendString(char* Streng)
{
   0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  // Repeat untill zero-termination
  while (*Streng != 0)
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

*************************************************************************/
void SendString(char* Streng)
{
  // Repeat untill zero-termination
  while (*Streng != 0)
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_10>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_13>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	65 01       	movw	r12, r10
  56:	74 01       	movw	r14, r8
  58:	83 01       	movw	r16, r6
  5a:	92 01       	movw	r18, r4
  5c:	a1 01       	movw	r20, r2
  5e:	b0 01       	movw	r22, r0
  60:	bf 01       	movw	r22, r30
  62:	ce 01       	movw	r24, r28
  64:	dd 01       	movw	r26, r26
  66:	36 02       	muls	r19, r22
  68:	36 02       	muls	r19, r22
  6a:	36 02       	muls	r19, r22
  6c:	36 02       	muls	r19, r22
  6e:	36 02       	muls	r19, r22
  70:	36 02       	muls	r19, r22
  72:	36 02       	muls	r19, r22
  74:	36 02       	muls	r19, r22
  76:	36 02       	muls	r19, r22
  78:	36 02       	muls	r19, r22
  7a:	36 02       	muls	r19, r22
  7c:	36 02       	muls	r19, r22
  7e:	36 02       	muls	r19, r22
  80:	36 02       	muls	r19, r22
  82:	36 02       	muls	r19, r22
  84:	36 02       	muls	r19, r22
  86:	36 02       	muls	r19, r22
  88:	36 02       	muls	r19, r22
  8a:	36 02       	muls	r19, r22
  8c:	36 02       	muls	r19, r22
  8e:	36 02       	muls	r19, r22
  90:	36 02       	muls	r19, r22
  92:	36 02       	muls	r19, r22
  94:	36 02       	muls	r19, r22
  96:	36 02       	muls	r19, r22
  98:	36 02       	muls	r19, r22
  9a:	36 02       	muls	r19, r22
  9c:	36 02       	muls	r19, r22
  9e:	36 02       	muls	r19, r22
  a0:	36 02       	muls	r19, r22
  a2:	36 02       	muls	r19, r22
  a4:	36 02       	muls	r19, r22
  a6:	36 02       	muls	r19, r22
  a8:	36 02       	muls	r19, r22
  aa:	36 02       	muls	r19, r22
  ac:	36 02       	muls	r19, r22
  ae:	36 02       	muls	r19, r22
  b0:	36 02       	muls	r19, r22
  b2:	36 02       	muls	r19, r22
  b4:	ec 01       	movw	r28, r24
  b6:	fb 01       	movw	r30, r22
  b8:	0a 02       	muls	r16, r26
  ba:	19 02       	muls	r17, r25
  bc:	28 02       	muls	r18, r24
  be:	42 02       	muls	r20, r18
  c0:	51 02       	muls	r21, r17
  c2:	60 02       	muls	r22, r16
  c4:	6f 02       	muls	r22, r31
  c6:	7e 02       	muls	r23, r30
  c8:	8d 02       	muls	r24, r29
  ca:	9c 02       	muls	r25, r28
  cc:	ab 02       	muls	r26, r27
  ce:	ba 02       	muls	r27, r26
  d0:	22 03       	mulsu	r18, r18
  d2:	22 03       	mulsu	r18, r18
  d4:	22 03       	mulsu	r18, r18
  d6:	22 03       	mulsu	r18, r18
  d8:	22 03       	mulsu	r18, r18
  da:	22 03       	mulsu	r18, r18
  dc:	22 03       	mulsu	r18, r18
  de:	22 03       	mulsu	r18, r18
  e0:	22 03       	mulsu	r18, r18
  e2:	22 03       	mulsu	r18, r18
  e4:	22 03       	mulsu	r18, r18
  e6:	22 03       	mulsu	r18, r18
  e8:	22 03       	mulsu	r18, r18
  ea:	22 03       	mulsu	r18, r18
  ec:	22 03       	mulsu	r18, r18
  ee:	22 03       	mulsu	r18, r18
  f0:	22 03       	mulsu	r18, r18
  f2:	22 03       	mulsu	r18, r18
  f4:	22 03       	mulsu	r18, r18
  f6:	22 03       	mulsu	r18, r18
  f8:	22 03       	mulsu	r18, r18
  fa:	22 03       	mulsu	r18, r18
  fc:	22 03       	mulsu	r18, r18
  fe:	22 03       	mulsu	r18, r18
 100:	22 03       	mulsu	r18, r18
 102:	22 03       	mulsu	r18, r18
 104:	22 03       	mulsu	r18, r18
 106:	22 03       	mulsu	r18, r18
 108:	22 03       	mulsu	r18, r18
 10a:	22 03       	mulsu	r18, r18
 10c:	22 03       	mulsu	r18, r18
 10e:	22 03       	mulsu	r18, r18
 110:	22 03       	mulsu	r18, r18
 112:	22 03       	mulsu	r18, r18
 114:	22 03       	mulsu	r18, r18
 116:	22 03       	mulsu	r18, r18
 118:	22 03       	mulsu	r18, r18
 11a:	22 03       	mulsu	r18, r18
 11c:	22 03       	mulsu	r18, r18
 11e:	c9 02       	muls	r28, r25
 120:	d8 02       	muls	r29, r24
 122:	e7 02       	muls	r30, r23
 124:	f6 02       	muls	r31, r22
 126:	05 03       	mulsu	r16, r21
 128:	14 03       	mulsu	r17, r20

0000012a <__ctors_end>:
 12a:	11 24       	eor	r1, r1
 12c:	1f be       	out	0x3f, r1	; 63
 12e:	cf e5       	ldi	r28, 0x5F	; 95
 130:	d8 e0       	ldi	r29, 0x08	; 8
 132:	de bf       	out	0x3e, r29	; 62
 134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	a0 e6       	ldi	r26, 0x60	; 96
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e0 e1       	ldi	r30, 0x10	; 16
 13e:	f8 e0       	ldi	r31, 0x08	; 8
 140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
 142:	05 90       	lpm	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	a2 36       	cpi	r26, 0x62	; 98
 148:	b1 07       	cpc	r27, r17
 14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	a2 e6       	ldi	r26, 0x62	; 98
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	ae 36       	cpi	r26, 0x6E	; 110
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 3f 03 	call	0x67e	; 0x67e <main>
 160:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <__vector_3>:
hvis det er et 1 cycel og en 1 bit. sendes der et burst ellers sker der ingenting 
når der er sent et burst tælles send counteren en op og vi kikker på den næste plads
når 5 bit er sent sættes ready til 0 samt '\0' sendes for indikere at vi har en tom databuffer så vi stopper med at sende.
----------------------------------------------------------------------*/
ISR(INT2_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
flag++;
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 60 00 	sts	0x0060, r24
if(ready == 1)
 194:	80 91 68 00 	lds	r24, 0x0068
 198:	90 91 69 00 	lds	r25, 0x0069
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <__vector_3+0x3a>
 1a0:	50 c0       	rjmp	.+160    	; 0x242 <__vector_3+0xda>
{
	if (flag % 2 == 1) 
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	80 ff       	sbrs	r24, 0
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__vector_3+0x4a>
	{
		failsafe = 0; // sikre at vi ikke sender et 1 og 0 i samme cycel
 1aa:	10 92 6d 00 	sts	0x006D, r1
 1ae:	10 92 6c 00 	sts	0x006C, r1
	}

    if(flag % 2 == 1)  // 1 cycel
 1b2:	80 91 60 00 	lds	r24, 0x0060
 1b6:	80 ff       	sbrs	r24, 0
 1b8:	1a c0       	rjmp	.+52     	; 0x1ee <__vector_3+0x86>
    {
	    if (DataBuffer[sendcounter] == '1')
 1ba:	e0 91 6a 00 	lds	r30, 0x006A
 1be:	f0 91 6b 00 	lds	r31, 0x006B
 1c2:	ee 59       	subi	r30, 0x9E	; 158
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	81 33       	cpi	r24, 0x31	; 49
 1ca:	89 f4       	brne	.+34     	; 0x1ee <__vector_3+0x86>
	    {
		    Burst();
 1cc:	0e 94 b8 03 	call	0x770	; 0x770 <Burst>
		    sendcounter++;
 1d0:	80 91 6a 00 	lds	r24, 0x006A
 1d4:	90 91 6b 00 	lds	r25, 0x006B
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 6b 00 	sts	0x006B, r25
 1de:	80 93 6a 00 	sts	0x006A, r24
		    failsafe = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 6d 00 	sts	0x006D, r25
 1ea:	80 93 6c 00 	sts	0x006C, r24
		    //nothing
	    }
	    
    }

	if(flag % 2 == 0) // 0 cycel
 1ee:	80 91 60 00 	lds	r24, 0x0060
 1f2:	80 fd       	sbrc	r24, 0
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <__vector_3+0xc2>
    {
		if (DataBuffer[sendcounter] == '0')
 1f6:	e0 91 6a 00 	lds	r30, 0x006A
 1fa:	f0 91 6b 00 	lds	r31, 0x006B
 1fe:	ee 59       	subi	r30, 0x9E	; 158
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	80 33       	cpi	r24, 0x30	; 48
 206:	89 f4       	brne	.+34     	; 0x22a <__vector_3+0xc2>
        {
				if (failsafe == 0)
 208:	80 91 6c 00 	lds	r24, 0x006C
 20c:	90 91 6d 00 	lds	r25, 0x006D
 210:	89 2b       	or	r24, r25
 212:	59 f4       	brne	.+22     	; 0x22a <__vector_3+0xc2>
				{
					Burst();
 214:	0e 94 b8 03 	call	0x770	; 0x770 <Burst>
					sendcounter++;
 218:	80 91 6a 00 	lds	r24, 0x006A
 21c:	90 91 6b 00 	lds	r25, 0x006B
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 6b 00 	sts	0x006B, r25
 226:	80 93 6a 00 	sts	0x006A, r24
		{
			//nothing
		}
    }
       
    if (sendcounter == 5)
 22a:	80 91 6a 00 	lds	r24, 0x006A
 22e:	90 91 6b 00 	lds	r25, 0x006B
 232:	05 97       	sbiw	r24, 0x05	; 5
 234:	31 f4       	brne	.+12     	; 0x242 <__vector_3+0xda>
    {
		ready = 0;
 236:	10 92 69 00 	sts	0x0069, r1
 23a:	10 92 68 00 	sts	0x0068, r1
		DataBuffer[0] = '\0';
 23e:	10 92 62 00 	sts	0x0062, r1
	}		
}
} 
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_13>:
 hvis den første char er ! eller ? 
 checkes der for om der skal tændes eller slukkes for lys
 derefter senden den et binær array til databuffern som skal sendes via zero crossing interrupts
 */
ISR (USART_RXC_vect)
{ 
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <__vector_13+0x28>
 28c:	00 d0       	rcall	.+0      	; 0x28e <__vector_13+0x2a>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	char Buffer[4];
	ReadString(&Buffer,ARRAY);
 292:	64 e0       	ldi	r22, 0x04	; 4
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	0e 94 90 03 	call	0x720	; 0x720 <ReadString>
	if (Buffer[0] == '!' || Buffer[0] == '?')
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	81 32       	cpi	r24, 0x21	; 33
 2a2:	19 f0       	breq	.+6      	; 0x2aa <__vector_13+0x46>
 2a4:	8f 33       	cpi	r24, 0x3F	; 63
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_13+0x46>
 2a8:	d3 c1       	rjmp	.+934    	; 0x650 <__vector_13+0x3ec>
	{
		if (Buffer[2] == '0')
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	80 33       	cpi	r24, 0x30	; 48
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <__vector_13+0x4e>
 2b0:	c9 c1       	rjmp	.+914    	; 0x644 <__vector_13+0x3e0>
		{
			switch (Buffer[1])
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	f1 97       	sbiw	r30, 0x31	; 49
 2ba:	e5 33       	cpi	r30, 0x35	; 53
 2bc:	f1 05       	cpc	r31, r1
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <__vector_13+0x5e>
 2c0:	d5 c0       	rjmp	.+426    	; 0x46c <__vector_13+0x208>
 2c2:	e6 5d       	subi	r30, 0xD6	; 214
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	0c 94 00 04 	jmp	0x800	; 0x800 <__tablejump2__>
			{ 
				case '1' ://DataBuffer[5] = {0,0,0,1,1}; 
					DataBuffer[0] = '0';
 2ca:	80 e3       	ldi	r24, 0x30	; 48
 2cc:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 2d0:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 2d4:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 2d8:	81 e3       	ldi	r24, 0x31	; 49
 2da:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 2de:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0'; 
 2e2:	10 92 67 00 	sts	0x0067, r1
					break;
 2e6:	c2 c0       	rjmp	.+388    	; 0x46c <__vector_13+0x208>

				case '2' ://DataBuffer[5] = {0,0,1,0,1}; 
					DataBuffer[0] = '0';
 2e8:	80 e3       	ldi	r24, 0x30	; 48
 2ea:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 2ee:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 2f2:	91 e3       	ldi	r25, 0x31	; 49
 2f4:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '0';
 2f8:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 2fc:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';				 
 300:	10 92 67 00 	sts	0x0067, r1
					break;
 304:	b3 c0       	rjmp	.+358    	; 0x46c <__vector_13+0x208>

				case '3' ://DataBuffer[5] = {0,0,1,1,1};  
					DataBuffer[0] = '0';
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 30c:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 310:	81 e3       	ldi	r24, 0x31	; 49
 312:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 316:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 31a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 31e:	10 92 67 00 	sts	0x0067, r1
					break;
 322:	a4 c0       	rjmp	.+328    	; 0x46c <__vector_13+0x208>

				case '4' ://DataBuffer[5] = {0,1,0,0,1}; 
					DataBuffer[0] = '0';
 324:	80 e3       	ldi	r24, 0x30	; 48
 326:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 32a:	91 e3       	ldi	r25, 0x31	; 49
 32c:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '0';
 330:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 334:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 338:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';
 33c:	10 92 67 00 	sts	0x0067, r1
					break;
 340:	95 c0       	rjmp	.+298    	; 0x46c <__vector_13+0x208>

				case '5' ://DataBuffer[5] = {0,1,0,1,1}; 
					DataBuffer[0] = '0';
 342:	90 e3       	ldi	r25, 0x30	; 48
 344:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '1';
 348:	81 e3       	ldi	r24, 0x31	; 49
 34a:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 34e:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '1';
 352:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 356:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 35a:	10 92 67 00 	sts	0x0067, r1
					break;
 35e:	86 c0       	rjmp	.+268    	; 0x46c <__vector_13+0x208>

				case '6' ://DataBuffer[5] = {0,1,1,0,1};  
					DataBuffer[0] = '0';
 360:	90 e3       	ldi	r25, 0x30	; 48
 362:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '1';
 366:	81 e3       	ldi	r24, 0x31	; 49
 368:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 36c:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 370:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '1';
 374:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 378:	10 92 67 00 	sts	0x0067, r1
					break;
 37c:	77 c0       	rjmp	.+238    	; 0x46c <__vector_13+0x208>

				case '7' ://DataBuffer[5] = {0,1,1,1,1}; 
					DataBuffer[0] = '0';
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 384:	81 e3       	ldi	r24, 0x31	; 49
 386:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 38a:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 38e:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 392:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 396:	10 92 67 00 	sts	0x0067, r1
					break;
 39a:	68 c0       	rjmp	.+208    	; 0x46c <__vector_13+0x208>

				case '8' :// DataBuffer[5] = {1,0,0,0,1};  
					DataBuffer[0] = '1';
 39c:	91 e3       	ldi	r25, 0x31	; 49
 39e:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '0';
 3a2:	80 e3       	ldi	r24, 0x30	; 48
 3a4:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 3a8:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 3ac:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 3b0:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';
 3b4:	10 92 67 00 	sts	0x0067, r1
					break;
 3b8:	59 c0       	rjmp	.+178    	; 0x46c <__vector_13+0x208>

				case '9' ://DataBuffer[5] = {1,0,0,1,1};  
					DataBuffer[0] = '1';
 3ba:	81 e3       	ldi	r24, 0x31	; 49
 3bc:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 3c0:	90 e3       	ldi	r25, 0x30	; 48
 3c2:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '0';
 3c6:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '1';
 3ca:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 3ce:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 3d2:	10 92 67 00 	sts	0x0067, r1
					break;
 3d6:	4a c0       	rjmp	.+148    	; 0x46c <__vector_13+0x208>

				case 'a' ://DataBuffer[5] = {1,0,1,0,1}; 
					DataBuffer[0] = '1';
 3d8:	81 e3       	ldi	r24, 0x31	; 49
 3da:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 3de:	90 e3       	ldi	r25, 0x30	; 48
 3e0:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '1';
 3e4:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 3e8:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '1';
 3ec:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 3f0:	10 92 67 00 	sts	0x0067, r1
					break;
 3f4:	3b c0       	rjmp	.+118    	; 0x46c <__vector_13+0x208>

				case 'b' ://DataBuffer[5] = {1,0,1,1,1};  
					DataBuffer[0] = '1';
 3f6:	81 e3       	ldi	r24, 0x31	; 49
 3f8:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 3fc:	90 e3       	ldi	r25, 0x30	; 48
 3fe:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '1';
 402:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 406:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 40a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 40e:	10 92 67 00 	sts	0x0067, r1
					break;
 412:	2c c0       	rjmp	.+88     	; 0x46c <__vector_13+0x208>

				case 'c' ://DataBuffer[5] = {1,1,0,0,1}; 
					DataBuffer[0] = '1';
 414:	81 e3       	ldi	r24, 0x31	; 49
 416:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 41a:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 41e:	90 e3       	ldi	r25, 0x30	; 48
 420:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '0';
 424:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '1';
 428:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 42c:	10 92 67 00 	sts	0x0067, r1
					break;
 430:	1d c0       	rjmp	.+58     	; 0x46c <__vector_13+0x208>

				case 'd' ://DataBuffer[5] = {1,1,0,1,1};
			 
					DataBuffer[0] = '1';
 432:	81 e3       	ldi	r24, 0x31	; 49
 434:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 438:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 43c:	90 e3       	ldi	r25, 0x30	; 48
 43e:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '1';
 442:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '1';
 446:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 44a:	10 92 67 00 	sts	0x0067, r1
					break;
 44e:	0e c0       	rjmp	.+28     	; 0x46c <__vector_13+0x208>

				case 'e' :// DataBuffer[5] = {1,1,1,0,1};  
					DataBuffer[0] = '1';
 450:	81 e3       	ldi	r24, 0x31	; 49
 452:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 456:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 45a:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 45e:	90 e3       	ldi	r25, 0x30	; 48
 460:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '1';
 464:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 468:	10 92 67 00 	sts	0x0067, r1
			}
		}

		if (Buffer[2] == '0')
		{
			switch (Buffer[1])
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	f1 97       	sbiw	r30, 0x31	; 49
 474:	e6 33       	cpi	r30, 0x36	; 54
 476:	f1 05       	cpc	r31, r1
 478:	08 f0       	brcs	.+2      	; 0x47c <__vector_13+0x218>
 47a:	e4 c0       	rjmp	.+456    	; 0x644 <__vector_13+0x3e0>
 47c:	e1 5a       	subi	r30, 0xA1	; 161
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	0c 94 00 04 	jmp	0x800	; 0x800 <__tablejump2__>
			{
				case '1' ://DataBuffer[5] = {0,0,0,1,0};
					DataBuffer[0] = '0';
 484:	80 e3       	ldi	r24, 0x30	; 48
 486:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 48a:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 48e:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 492:	91 e3       	ldi	r25, 0x31	; 49
 494:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '0';
 498:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 49c:	10 92 67 00 	sts	0x0067, r1
					break;
 4a0:	d1 c0       	rjmp	.+418    	; 0x644 <__vector_13+0x3e0>

				case '2' ://DataBuffer[5] = {0,0,1,0,0};
					DataBuffer[0] = '0';
 4a2:	80 e3       	ldi	r24, 0x30	; 48
 4a4:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 4a8:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 4ac:	91 e3       	ldi	r25, 0x31	; 49
 4ae:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '0';
 4b2:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 4b6:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 4ba:	10 92 67 00 	sts	0x0067, r1
					break;
 4be:	c2 c0       	rjmp	.+388    	; 0x644 <__vector_13+0x3e0>

				case '3' ://DataBuffer[5] = {0,0,1,1,0};
					DataBuffer[0] = '0';
 4c0:	80 e3       	ldi	r24, 0x30	; 48
 4c2:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 4c6:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 4ca:	91 e3       	ldi	r25, 0x31	; 49
 4cc:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '1';
 4d0:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '0';
 4d4:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 4d8:	10 92 67 00 	sts	0x0067, r1
					break;
 4dc:	b3 c0       	rjmp	.+358    	; 0x644 <__vector_13+0x3e0>

				case '4' ://DataBuffer[5] = {0,1,0,0,0};
					DataBuffer[0] = '0';
 4de:	80 e3       	ldi	r24, 0x30	; 48
 4e0:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 4e4:	91 e3       	ldi	r25, 0x31	; 49
 4e6:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '0';
 4ea:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 4ee:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 4f2:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 4f6:	10 92 67 00 	sts	0x0067, r1
					break;
 4fa:	a4 c0       	rjmp	.+328    	; 0x644 <__vector_13+0x3e0>

				case '5' ://DataBuffer[5] = {0,1,0,1,0};
					DataBuffer[0] = '0';
 4fc:	80 e3       	ldi	r24, 0x30	; 48
 4fe:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 502:	91 e3       	ldi	r25, 0x31	; 49
 504:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '0';
 508:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 50c:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '0';
 510:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 514:	10 92 67 00 	sts	0x0067, r1
					break;
 518:	95 c0       	rjmp	.+298    	; 0x644 <__vector_13+0x3e0>

				case '6' ://DataBuffer[5] = {0,1,1,0,0};
					DataBuffer[0] = '0';
 51a:	80 e3       	ldi	r24, 0x30	; 48
 51c:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 520:	91 e3       	ldi	r25, 0x31	; 49
 522:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '1';
 526:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '0';
 52a:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 52e:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 532:	10 92 67 00 	sts	0x0067, r1
					break;
 536:	86 c0       	rjmp	.+268    	; 0x644 <__vector_13+0x3e0>

				case '7' ://DataBuffer[5] = {0,1,1,1,0};
					DataBuffer[0] = '0';
 538:	90 e3       	ldi	r25, 0x30	; 48
 53a:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '1';
 53e:	81 e3       	ldi	r24, 0x31	; 49
 540:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 544:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 548:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 54c:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';
 550:	10 92 67 00 	sts	0x0067, r1
					break;
 554:	77 c0       	rjmp	.+238    	; 0x644 <__vector_13+0x3e0>

				case '8' :// DataBuffer[5] = {1,0,0,0,0};
					DataBuffer[0] = '1';
 556:	81 e3       	ldi	r24, 0x31	; 49
 558:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 55c:	80 e3       	ldi	r24, 0x30	; 48
 55e:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 562:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 566:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 56a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 56e:	10 92 67 00 	sts	0x0067, r1
					break;
 572:	68 c0       	rjmp	.+208    	; 0x644 <__vector_13+0x3e0>

				case '9' ://DataBuffer[5] = {1,0,0,1,0};
					DataBuffer[0] = '1';
 574:	91 e3       	ldi	r25, 0x31	; 49
 576:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '0';
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 580:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 584:	90 93 65 00 	sts	0x0065, r25
					DataBuffer[4] = '0';
 588:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 58c:	10 92 67 00 	sts	0x0067, r1
					break;
 590:	59 c0       	rjmp	.+178    	; 0x644 <__vector_13+0x3e0>

				case 'a' ://DataBuffer[5] = {1,0,1,0,0};
					DataBuffer[0] = '1';
 592:	91 e3       	ldi	r25, 0x31	; 49
 594:	90 93 62 00 	sts	0x0062, r25
					DataBuffer[1] = '0';
 598:	80 e3       	ldi	r24, 0x30	; 48
 59a:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 59e:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '0';
 5a2:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 5a6:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 5aa:	10 92 67 00 	sts	0x0067, r1
					break;
 5ae:	4a c0       	rjmp	.+148    	; 0x644 <__vector_13+0x3e0>

				case 'b' ://DataBuffer[5] = {1,0,1,1,0};
					DataBuffer[0] = '1';
 5b0:	81 e3       	ldi	r24, 0x31	; 49
 5b2:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '0';
 5b6:	90 e3       	ldi	r25, 0x30	; 48
 5b8:	90 93 63 00 	sts	0x0063, r25
					DataBuffer[2] = '1';
 5bc:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 5c0:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 5c4:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';
 5c8:	10 92 67 00 	sts	0x0067, r1
					break;
 5cc:	3b c0       	rjmp	.+118    	; 0x644 <__vector_13+0x3e0>

				case 'c' ://DataBuffer[5] = {1,1,0,0,0};
					DataBuffer[0] = '1';
 5ce:	81 e3       	ldi	r24, 0x31	; 49
 5d0:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 5d4:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 5de:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 5e2:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 5e6:	10 92 67 00 	sts	0x0067, r1
					break;
 5ea:	2c c0       	rjmp	.+88     	; 0x644 <__vector_13+0x3e0>

				case 'd' ://DataBuffer[5] = {1,1,0,1,0};
					DataBuffer[0] = '1';
 5ec:	81 e3       	ldi	r24, 0x31	; 49
 5ee:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 5f2:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '0';
 5f6:	90 e3       	ldi	r25, 0x30	; 48
 5f8:	90 93 64 00 	sts	0x0064, r25
					DataBuffer[3] = '1';
 5fc:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 600:	90 93 66 00 	sts	0x0066, r25
					DataBuffer[5] = '\0';
 604:	10 92 67 00 	sts	0x0067, r1
					break;
 608:	1d c0       	rjmp	.+58     	; 0x644 <__vector_13+0x3e0>

				case 'e' :// DataBuffer[5] = {1,1,1,0,0};
					DataBuffer[0] = '1';
 60a:	81 e3       	ldi	r24, 0x31	; 49
 60c:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 610:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 614:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '0';
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 61e:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 622:	10 92 67 00 	sts	0x0067, r1
					break;
 626:	0e c0       	rjmp	.+28     	; 0x644 <__vector_13+0x3e0>

				case 'f' ://DataBuffer[5] = {1,1,1,1,0};
					DataBuffer[0] = '1';
 628:	81 e3       	ldi	r24, 0x31	; 49
 62a:	80 93 62 00 	sts	0x0062, r24
					DataBuffer[1] = '1';
 62e:	80 93 63 00 	sts	0x0063, r24
					DataBuffer[2] = '1';
 632:	80 93 64 00 	sts	0x0064, r24
					DataBuffer[3] = '1';
 636:	80 93 65 00 	sts	0x0065, r24
					DataBuffer[4] = '0';
 63a:	80 e3       	ldi	r24, 0x30	; 48
 63c:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[5] = '\0';
 640:	10 92 67 00 	sts	0x0067, r1
					break;
			}
		}
	ready = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	90 93 69 00 	sts	0x0069, r25
 64c:	80 93 68 00 	sts	0x0068, r24
	}

}
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <main>:


int main()
{
	// Initialize USART (with RX interrupt enable)
	InitUART(9600, 8, 1);
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	48 e0       	ldi	r20, 0x08	; 8
 682:	60 e8       	ldi	r22, 0x80	; 128
 684:	75 e2       	ldi	r23, 0x25	; 37
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 4b 03 	call	0x696	; 0x696 <InitUART>
	// Initialize CTC 
	InitAtmel();
 68e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <InitAtmel>
	// Global interrupt enable
	sei();
 692:	78 94       	sei
 694:	ff cf       	rjmp	.-2      	; 0x694 <main+0x16>

00000696 <InitUART>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char RX_int  )
{
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	52 2f       	mov	r21, r18
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 69c:	8b 01       	movw	r16, r22
 69e:	9c 01       	movw	r18, r24
 6a0:	0e 56       	subi	r16, 0x6E	; 110
 6a2:	11 09       	sbc	r17, r1
 6a4:	21 09       	sbc	r18, r1
 6a6:	31 09       	sbc	r19, r1
 6a8:	03 39       	cpi	r16, 0x93	; 147
 6aa:	11 4c       	sbci	r17, 0xC1	; 193
 6ac:	21 40       	sbci	r18, 0x01	; 1
 6ae:	31 05       	cpc	r19, r1
 6b0:	80 f5       	brcc	.+96     	; 0x712 <InitUART+0x7c>
 6b2:	2b ef       	ldi	r18, 0xFB	; 251
 6b4:	24 0f       	add	r18, r20
 6b6:	24 30       	cpi	r18, 0x04	; 4
 6b8:	60 f5       	brcc	.+88     	; 0x712 <InitUART+0x7c>
  { 
    // "Normal" clock, no multiprocesser mode (= default)
    UCSRA = 0b00100000;
 6ba:	20 e2       	ldi	r18, 0x20	; 32
 6bc:	2b b9       	out	0x0b, r18	; 11
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRB = 0b00011000;
 6be:	28 e1       	ldi	r18, 0x18	; 24
 6c0:	2a b9       	out	0x0a, r18	; 10
    // Enable RX interrupts if wanted
    if (RX_int)
 6c2:	51 11       	cpse	r21, r1
      UCSRB |= 0b10000000;
 6c4:	57 9a       	sbi	0x0a, 7	; 10
    // Asynchronous operation, 1 stop bit, no parity
    // Bit7 always has to be 1
    // Bit 2 and bit 1 controlles the number of databits
    UCSRC = 0b10000000 | (DataBit-5)<<1;
 6c6:	24 2f       	mov	r18, r20
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	25 50       	subi	r18, 0x05	; 5
 6cc:	31 09       	sbc	r19, r1
 6ce:	22 0f       	add	r18, r18
 6d0:	33 1f       	adc	r19, r19
 6d2:	20 68       	ori	r18, 0x80	; 128
 6d4:	20 bd       	out	0x20, r18	; 32
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers seperately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
 6d6:	dc 01       	movw	r26, r24
 6d8:	cb 01       	movw	r24, r22
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	aa 1f       	adc	r26, r26
 6e8:	bb 1f       	adc	r27, r27
 6ea:	9c 01       	movw	r18, r24
 6ec:	ad 01       	movw	r20, r26
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	44 1f       	adc	r20, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	44 1f       	adc	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	70 e4       	ldi	r23, 0x40	; 64
 702:	88 e3       	ldi	r24, 0x38	; 56
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 de 03 	call	0x7bc	; 0x7bc <__udivmodsi4>
 70a:	21 50       	subi	r18, 0x01	; 1
 70c:	31 09       	sbc	r19, r1
    // Write upper part of UBRR
    UBRRH = TempUBRR >> 8;
 70e:	30 bd       	out	0x20, r19	; 32
    // Write lower part of UBRR
    UBRRL = TempUBRR;
 710:	29 b9       	out	0x09, r18	; 9
  }  
}
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	08 95       	ret

00000718 <ReadChar>:
	Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSRA & (1<<7)) == 0 )
 718:	5f 9b       	sbis	0x0b, 7	; 11
 71a:	fe cf       	rjmp	.-4      	; 0x718 <ReadChar>
  {}                        
  // Then return it
  return UDR;
 71c:	8c b1       	in	r24, 0x0c	; 12
}
 71e:	08 95       	ret

00000720 <ReadString>:
tæller stringlenght en op
sætter ReadChar ind i NextChar 
og når den er færdig med loopet ligger den NULL ind i buffern
*************************************************************************/
void ReadString(char* Buffer, int MaxLenght)
{
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	8c 01       	movw	r16, r24
 72e:	7b 01       	movw	r14, r22
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
 730:	0e 94 8c 03 	call	0x718	; 0x718 <ReadChar>
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 734:	8d 30       	cpi	r24, 0x0D	; 13
 736:	99 f0       	breq	.+38     	; 0x75e <ReadString+0x3e>
 738:	1e 14       	cp	r1, r14
 73a:	1f 04       	cpc	r1, r15
 73c:	84 f4       	brge	.+32     	; 0x75e <ReadString+0x3e>
 73e:	f8 01       	movw	r30, r16
 740:	e0 0e       	add	r14, r16
 742:	f1 1e       	adc	r15, r17
 744:	ef 01       	movw	r28, r30
 746:	21 96       	adiw	r28, 0x01	; 1
 748:	8e 01       	movw	r16, r28
	{
		*Buffer++ = NextChar;
 74a:	80 83       	st	Z, r24
		StringLenght++;
		NextChar = ReadChar();
 74c:	0e 94 8c 03 	call	0x718	; 0x718 <ReadChar>
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 750:	8d 30       	cpi	r24, 0x0D	; 13
 752:	29 f0       	breq	.+10     	; 0x75e <ReadString+0x3e>
 754:	ce 15       	cp	r28, r14
 756:	df 05       	cpc	r29, r15
 758:	11 f0       	breq	.+4      	; 0x75e <ReadString+0x3e>
 75a:	fe 01       	movw	r30, r28
 75c:	f3 cf       	rjmp	.-26     	; 0x744 <ReadString+0x24>
	{
		*Buffer++ = NextChar;
		StringLenght++;
		NextChar = ReadChar();
	}
	*Buffer = '\0';
 75e:	f8 01       	movw	r30, r16
 760:	10 82       	st	Z, r1
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	08 95       	ret

00000770 <Burst>:
----------------------------------------------------------------------*/

 
void Burst(void)
{
    DDRB |=(1<<PB3);
 770:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 772:	8d ee       	ldi	r24, 0xED	; 237
 774:	92 e0       	ldi	r25, 0x02	; 2
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <Burst+0x6>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <Burst+0xc>
 77c:	00 00       	nop
    _delay_ms(3);
	DDRB |=(0<<PB3);	   
 77e:	87 b3       	in	r24, 0x17	; 23
 780:	87 bb       	out	0x17, r24	; 23
 782:	08 95       	ret

00000784 <__vector_10>:
 1200005
 
---------------------------------------------------------------------*/
#define OCR0_VALUE 14
 ISR(TIMER0_COMP_vect)
 {
 784:	1f 92       	push	r1
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	8f 93       	push	r24
         OCR0 = (uint8_t)OCR0_VALUE;
 790:	8e e0       	ldi	r24, 0x0E	; 14
 792:	8c bf       	out	0x3c, r24	; 60
 }
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <InitAtmel>:
CTC - couter initial value
CTC - counter compare interrupt
---------------------------------------------------------------------*/
 void InitAtmel(void)
 {
	 DDRB |= (0<<PB2) | (0<<PB0);
 7a0:	87 b3       	in	r24, 0x17	; 23
 7a2:	87 bb       	out	0x17, r24	; 23
	 MCUCSR = 0b01000000;
 7a4:	80 e4       	ldi	r24, 0x40	; 64
 7a6:	84 bf       	out	0x34, r24	; 52
	 GICR |= 0b00100000;
 7a8:	8b b7       	in	r24, 0x3b	; 59
 7aa:	80 62       	ori	r24, 0x20	; 32
 7ac:	8b bf       	out	0x3b, r24	; 59
	 TCCR0 = 0b01101001;
 7ae:	89 e6       	ldi	r24, 0x69	; 105
 7b0:	83 bf       	out	0x33, r24	; 51
	 TCNT0 = 0;
 7b2:	12 be       	out	0x32, r1	; 50
	 TIMSK |=(1<<OCIE0);
 7b4:	89 b7       	in	r24, 0x39	; 57
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	89 bf       	out	0x39, r24	; 57
 7ba:	08 95       	ret

000007bc <__udivmodsi4>:
 7bc:	a1 e2       	ldi	r26, 0x21	; 33
 7be:	1a 2e       	mov	r1, r26
 7c0:	aa 1b       	sub	r26, r26
 7c2:	bb 1b       	sub	r27, r27
 7c4:	fd 01       	movw	r30, r26
 7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <__udivmodsi4_ep>

000007c8 <__udivmodsi4_loop>:
 7c8:	aa 1f       	adc	r26, r26
 7ca:	bb 1f       	adc	r27, r27
 7cc:	ee 1f       	adc	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	a2 17       	cp	r26, r18
 7d2:	b3 07       	cpc	r27, r19
 7d4:	e4 07       	cpc	r30, r20
 7d6:	f5 07       	cpc	r31, r21
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__udivmodsi4_ep>
 7da:	a2 1b       	sub	r26, r18
 7dc:	b3 0b       	sbc	r27, r19
 7de:	e4 0b       	sbc	r30, r20
 7e0:	f5 0b       	sbc	r31, r21

000007e2 <__udivmodsi4_ep>:
 7e2:	66 1f       	adc	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	1a 94       	dec	r1
 7ec:	69 f7       	brne	.-38     	; 0x7c8 <__udivmodsi4_loop>
 7ee:	60 95       	com	r22
 7f0:	70 95       	com	r23
 7f2:	80 95       	com	r24
 7f4:	90 95       	com	r25
 7f6:	9b 01       	movw	r18, r22
 7f8:	ac 01       	movw	r20, r24
 7fa:	bd 01       	movw	r22, r26
 7fc:	cf 01       	movw	r24, r30
 7fe:	08 95       	ret

00000800 <__tablejump2__>:
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31

00000804 <__tablejump__>:
 804:	05 90       	lpm	r0, Z+
 806:	f4 91       	lpm	r31, Z
 808:	e0 2d       	mov	r30, r0
 80a:	09 94       	ijmp

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
