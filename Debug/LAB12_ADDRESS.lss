
LAB12_ADDRESS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009d6  00000a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800062  00800062  00000a6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b9  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000469  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000297  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000507  00000000  00000000  00001e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_10>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_13>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	60 01       	movw	r12, r0
  56:	77 01       	movw	r14, r14
  58:	8e 01       	movw	r16, r28
  5a:	a5 01       	movw	r20, r10
  5c:	bc 01       	movw	r22, r24
  5e:	d3 01       	movw	r26, r6
  60:	ea 01       	movw	r28, r20
  62:	01 02       	muls	r16, r17
  64:	18 02       	muls	r17, r24
  66:	a1 02       	muls	r26, r17
  68:	a1 02       	muls	r26, r17
  6a:	a1 02       	muls	r26, r17
  6c:	a1 02       	muls	r26, r17
  6e:	a1 02       	muls	r26, r17
  70:	a1 02       	muls	r26, r17
  72:	a1 02       	muls	r26, r17
  74:	a1 02       	muls	r26, r17
  76:	a1 02       	muls	r26, r17
  78:	a1 02       	muls	r26, r17
  7a:	a1 02       	muls	r26, r17
  7c:	a1 02       	muls	r26, r17
  7e:	a1 02       	muls	r26, r17
  80:	a1 02       	muls	r26, r17
  82:	a1 02       	muls	r26, r17
  84:	a1 02       	muls	r26, r17
  86:	a1 02       	muls	r26, r17
  88:	a1 02       	muls	r26, r17
  8a:	a1 02       	muls	r26, r17
  8c:	a1 02       	muls	r26, r17
  8e:	a1 02       	muls	r26, r17
  90:	a1 02       	muls	r26, r17
  92:	a1 02       	muls	r26, r17
  94:	a1 02       	muls	r26, r17
  96:	a1 02       	muls	r26, r17
  98:	a1 02       	muls	r26, r17
  9a:	a1 02       	muls	r26, r17
  9c:	a1 02       	muls	r26, r17
  9e:	a1 02       	muls	r26, r17
  a0:	a1 02       	muls	r26, r17
  a2:	a1 02       	muls	r26, r17
  a4:	a1 02       	muls	r26, r17
  a6:	a1 02       	muls	r26, r17
  a8:	a1 02       	muls	r26, r17
  aa:	a1 02       	muls	r26, r17
  ac:	a1 02       	muls	r26, r17
  ae:	a1 02       	muls	r26, r17
  b0:	a1 02       	muls	r26, r17
  b2:	a1 02       	muls	r26, r17
  b4:	2f 02       	muls	r18, r31
  b6:	46 02       	muls	r20, r22
  b8:	5d 02       	muls	r21, r29
  ba:	74 02       	muls	r23, r20
  bc:	8b 02       	muls	r24, r27
  be:	ad 02       	muls	r26, r29
  c0:	c4 02       	muls	r28, r20
  c2:	db 02       	muls	r29, r27
  c4:	f2 02       	muls	r31, r18
  c6:	09 03       	fmul	r16, r17
  c8:	20 03       	mulsu	r18, r16
  ca:	37 03       	mulsu	r19, r23
  cc:	4e 03       	fmul	r20, r22
  ce:	65 03       	mulsu	r22, r21
  d0:	05 04       	cpc	r0, r5
  d2:	05 04       	cpc	r0, r5
  d4:	05 04       	cpc	r0, r5
  d6:	05 04       	cpc	r0, r5
  d8:	05 04       	cpc	r0, r5
  da:	05 04       	cpc	r0, r5
  dc:	05 04       	cpc	r0, r5
  de:	05 04       	cpc	r0, r5
  e0:	05 04       	cpc	r0, r5
  e2:	05 04       	cpc	r0, r5
  e4:	05 04       	cpc	r0, r5
  e6:	05 04       	cpc	r0, r5
  e8:	05 04       	cpc	r0, r5
  ea:	05 04       	cpc	r0, r5
  ec:	05 04       	cpc	r0, r5
  ee:	05 04       	cpc	r0, r5
  f0:	05 04       	cpc	r0, r5
  f2:	05 04       	cpc	r0, r5
  f4:	05 04       	cpc	r0, r5
  f6:	05 04       	cpc	r0, r5
  f8:	05 04       	cpc	r0, r5
  fa:	05 04       	cpc	r0, r5
  fc:	05 04       	cpc	r0, r5
  fe:	05 04       	cpc	r0, r5
 100:	05 04       	cpc	r0, r5
 102:	05 04       	cpc	r0, r5
 104:	05 04       	cpc	r0, r5
 106:	05 04       	cpc	r0, r5
 108:	05 04       	cpc	r0, r5
 10a:	05 04       	cpc	r0, r5
 10c:	05 04       	cpc	r0, r5
 10e:	05 04       	cpc	r0, r5
 110:	05 04       	cpc	r0, r5
 112:	05 04       	cpc	r0, r5
 114:	05 04       	cpc	r0, r5
 116:	05 04       	cpc	r0, r5
 118:	05 04       	cpc	r0, r5
 11a:	05 04       	cpc	r0, r5
 11c:	05 04       	cpc	r0, r5
 11e:	7c 03       	fmul	r23, r20
 120:	93 03       	fmuls	r17, r19
 122:	aa 03       	fmulsu	r18, r18
 124:	c1 03       	fmuls	r20, r17
 126:	d8 03       	fmulsu	r21, r16
 128:	ef 03       	fmulsu	r22, r23

0000012a <__ctors_end>:
 12a:	11 24       	eor	r1, r1
 12c:	1f be       	out	0x3f, r1	; 63
 12e:	cf e5       	ldi	r28, 0x5F	; 95
 130:	d8 e0       	ldi	r29, 0x08	; 8
 132:	de bf       	out	0x3e, r29	; 62
 134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	a0 e6       	ldi	r26, 0x60	; 96
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e6 ed       	ldi	r30, 0xD6	; 214
 13e:	f9 e0       	ldi	r31, 0x09	; 9
 140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
 142:	05 90       	lpm	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	a2 36       	cpi	r26, 0x62	; 98
 148:	b1 07       	cpc	r27, r17
 14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	a2 e6       	ldi	r26, 0x62	; 98
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a4 37       	cpi	r26, 0x74	; 116
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 22 04 	call	0x844	; 0x844 <main>
 160:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <__vector_3>:
hvis det er et 1 cycel og en 1 bit. sendes der et burst ellers sker der ingenting 
når der er sent et burst tælles send counteren en op og vi kikker på den næste plads
når 5 bit er sent sættes ready til 0 og vi stopper med at sende.
----------------------------------------------------------------------*/
ISR(INT2_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
flag++;
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 60 00 	sts	0x0060, r24
if(ready == 1)
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	90 91 63 00 	lds	r25, 0x0063
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <__vector_3+0x3a>
 1a0:	4b c0       	rjmp	.+150    	; 0x238 <__vector_3+0xd0>
{
	if(flag % 2 == 0)
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <__vector_3+0x5e>
    {
		if (DataBuffer[sendcounter] == 0)
 1aa:	e0 91 64 00 	lds	r30, 0x0064
 1ae:	f0 91 65 00 	lds	r31, 0x0065
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	ea 59       	subi	r30, 0x9A	; 154
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	91 81       	ldd	r25, Z+1	; 0x01
 1be:	89 2b       	or	r24, r25
 1c0:	11 f0       	breq	.+4      	; 0x1c6 <__vector_3+0x5e>
        {
			//nothing
        }
		else
		{
			Burst();
 1c2:	0e 94 9b 04 	call	0x936	; 0x936 <Burst>
		}
    }
                 
    if(flag % 2 == 1)
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	80 ff       	sbrs	r24, 0
 1cc:	17 c0       	rjmp	.+46     	; 0x1fc <__vector_3+0x94>
	{
		if (DataBuffer[sendcounter] == 1)
 1ce:	e0 91 64 00 	lds	r30, 0x0064
 1d2:	f0 91 65 00 	lds	r31, 0x0065
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ea 59       	subi	r30, 0x9A	; 154
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	11 f4       	brne	.+4      	; 0x1ea <__vector_3+0x82>
		{
			Burst();
 1e6:	0e 94 9b 04 	call	0x936	; 0x936 <Burst>
		}
		else
		{
			//nothing
		}
		sendcounter++;
 1ea:	80 91 64 00 	lds	r24, 0x0064
 1ee:	90 91 65 00 	lds	r25, 0x0065
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 65 00 	sts	0x0065, r25
 1f8:	80 93 64 00 	sts	0x0064, r24
	}

         
    if (sendcounter == 5)
 1fc:	80 91 64 00 	lds	r24, 0x0064
 200:	90 91 65 00 	lds	r25, 0x0065
 204:	05 97       	sbiw	r24, 0x05	; 5
 206:	c1 f4       	brne	.+48     	; 0x238 <__vector_3+0xd0>
    {
		ready = 0;
 208:	10 92 63 00 	sts	0x0063, r1
 20c:	10 92 62 00 	sts	0x0062, r1
		DataBuffer[0] = 0;
 210:	10 92 67 00 	sts	0x0067, r1
 214:	10 92 66 00 	sts	0x0066, r1
		DataBuffer[1] = 0;
 218:	10 92 69 00 	sts	0x0069, r1
 21c:	10 92 68 00 	sts	0x0068, r1
		DataBuffer[2] = 0;
 220:	10 92 6b 00 	sts	0x006B, r1
 224:	10 92 6a 00 	sts	0x006A, r1
		DataBuffer[3] = 0;
 228:	10 92 6d 00 	sts	0x006D, r1
 22c:	10 92 6c 00 	sts	0x006C, r1
		DataBuffer[4] = 0;
 230:	10 92 6f 00 	sts	0x006F, r1
 234:	10 92 6e 00 	sts	0x006E, r1
	}		
}
} 
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_13>:
 hvis den første char er ! eller ? 
 checkes der for om der skal tændes eller slukkes for lys
 derefter senden den et binær array til databuffern som skal sendes via zero crossing interrupts
 */
ISR (USART_RXC_vect)
{ 
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <__vector_13+0x28>
 282:	00 d0       	rcall	.+0      	; 0x284 <__vector_13+0x2a>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	char Buffer[4];
	ReadString(&Buffer,ARRAY);
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	0e 94 73 04 	call	0x8e6	; 0x8e6 <ReadString>
	if (Buffer[0] == '!' || Buffer[0] == '?')
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	81 32       	cpi	r24, 0x21	; 33
 298:	19 f0       	breq	.+6      	; 0x2a0 <__vector_13+0x46>
 29a:	8f 33       	cpi	r24, 0x3F	; 63
 29c:	09 f0       	breq	.+2      	; 0x2a0 <__vector_13+0x46>
 29e:	bb c2       	rjmp	.+1398   	; 0x816 <__vector_13+0x5bc>
	{
		if (Buffer[2] == '0')
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	80 33       	cpi	r24, 0x30	; 48
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_13+0x4e>
 2a6:	b1 c2       	rjmp	.+1378   	; 0x80a <__vector_13+0x5b0>
		{
			switch (Buffer[1])
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	fc 01       	movw	r30, r24
 2ae:	f1 97       	sbiw	r30, 0x31	; 49
 2b0:	e5 33       	cpi	r30, 0x35	; 53
 2b2:	f1 05       	cpc	r31, r1
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <__vector_13+0x5e>
 2b6:	45 c1       	rjmp	.+650    	; 0x542 <__vector_13+0x2e8>
 2b8:	e6 5d       	subi	r30, 0xD6	; 214
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__tablejump2__>
			{ 
				case '1' ://DataBuffer[5] = {0,0,0,1,1}; 
					DataBuffer[0] = 0;
 2c0:	10 92 67 00 	sts	0x0067, r1
 2c4:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 2c8:	10 92 69 00 	sts	0x0069, r1
 2cc:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 2d0:	10 92 6b 00 	sts	0x006B, r1
 2d4:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 6d 00 	sts	0x006D, r25
 2e0:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1; 
 2e4:	90 93 6f 00 	sts	0x006F, r25
 2e8:	80 93 6e 00 	sts	0x006E, r24
					break;
 2ec:	2a c1       	rjmp	.+596    	; 0x542 <__vector_13+0x2e8>

				case '2' ://DataBuffer[5] = {0,0,1,0,1}; 
					DataBuffer[0] = 0;
 2ee:	10 92 67 00 	sts	0x0067, r1
 2f2:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 2f6:	10 92 69 00 	sts	0x0069, r1
 2fa:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 6b 00 	sts	0x006B, r25
 306:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 30a:	10 92 6d 00 	sts	0x006D, r1
 30e:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;				 
 312:	90 93 6f 00 	sts	0x006F, r25
 316:	80 93 6e 00 	sts	0x006E, r24
					break;
 31a:	13 c1       	rjmp	.+550    	; 0x542 <__vector_13+0x2e8>

				case '3' ://DataBuffer[5] = {0,0,1,1,1};  
					DataBuffer[0] = 0;
 31c:	10 92 67 00 	sts	0x0067, r1
 320:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 324:	10 92 69 00 	sts	0x0069, r1
 328:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 6b 00 	sts	0x006B, r25
 334:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 338:	90 93 6d 00 	sts	0x006D, r25
 33c:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 340:	90 93 6f 00 	sts	0x006F, r25
 344:	80 93 6e 00 	sts	0x006E, r24
					break;
 348:	fc c0       	rjmp	.+504    	; 0x542 <__vector_13+0x2e8>

				case '4' ://DataBuffer[5] = {0,1,0,0,1}; 
					DataBuffer[0] = 0;
 34a:	10 92 67 00 	sts	0x0067, r1
 34e:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 69 00 	sts	0x0069, r25
 35a:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 35e:	10 92 6b 00 	sts	0x006B, r1
 362:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 366:	10 92 6d 00 	sts	0x006D, r1
 36a:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 36e:	90 93 6f 00 	sts	0x006F, r25
 372:	80 93 6e 00 	sts	0x006E, r24
					break;
 376:	e5 c0       	rjmp	.+458    	; 0x542 <__vector_13+0x2e8>

				case '5' ://DataBuffer[5] = {0,1,0,1,1}; 
					DataBuffer[0] = 0;
 378:	10 92 67 00 	sts	0x0067, r1
 37c:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 69 00 	sts	0x0069, r25
 388:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 38c:	10 92 6b 00 	sts	0x006B, r1
 390:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 394:	90 93 6d 00 	sts	0x006D, r25
 398:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 39c:	90 93 6f 00 	sts	0x006F, r25
 3a0:	80 93 6e 00 	sts	0x006E, r24
					break;
 3a4:	ce c0       	rjmp	.+412    	; 0x542 <__vector_13+0x2e8>

				case '6' ://DataBuffer[5] = {0,1,1,0,1};  
					DataBuffer[0] = 0;
 3a6:	10 92 67 00 	sts	0x0067, r1
 3aa:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 69 00 	sts	0x0069, r25
 3b6:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 3ba:	90 93 6b 00 	sts	0x006B, r25
 3be:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 3c2:	10 92 6d 00 	sts	0x006D, r1
 3c6:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 3ca:	90 93 6f 00 	sts	0x006F, r25
 3ce:	80 93 6e 00 	sts	0x006E, r24
					break;
 3d2:	b7 c0       	rjmp	.+366    	; 0x542 <__vector_13+0x2e8>

				case '7' ://DataBuffer[5] = {0,1,1,1,1}; 
					DataBuffer[0] = 0;
 3d4:	10 92 67 00 	sts	0x0067, r1
 3d8:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 69 00 	sts	0x0069, r25
 3e4:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 3e8:	90 93 6b 00 	sts	0x006B, r25
 3ec:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 3f0:	90 93 6d 00 	sts	0x006D, r25
 3f4:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 3f8:	90 93 6f 00 	sts	0x006F, r25
 3fc:	80 93 6e 00 	sts	0x006E, r24
					break;
 400:	a0 c0       	rjmp	.+320    	; 0x542 <__vector_13+0x2e8>

				case '8' :// DataBuffer[5] = {1,0,0,0,1};  
					DataBuffer[0] = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 67 00 	sts	0x0067, r25
 40a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 40e:	10 92 69 00 	sts	0x0069, r1
 412:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 416:	10 92 6b 00 	sts	0x006B, r1
 41a:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 41e:	10 92 6d 00 	sts	0x006D, r1
 422:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 426:	90 93 6f 00 	sts	0x006F, r25
 42a:	80 93 6e 00 	sts	0x006E, r24
					break;
 42e:	89 c0       	rjmp	.+274    	; 0x542 <__vector_13+0x2e8>

				case '9' ://DataBuffer[5] = {1,0,0,1,1};  
					DataBuffer[0] = 1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 67 00 	sts	0x0067, r25
 438:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 43c:	10 92 69 00 	sts	0x0069, r1
 440:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 444:	10 92 6b 00 	sts	0x006B, r1
 448:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 44c:	90 93 6d 00 	sts	0x006D, r25
 450:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 454:	90 93 6f 00 	sts	0x006F, r25
 458:	80 93 6e 00 	sts	0x006E, r24
					break;
 45c:	72 c0       	rjmp	.+228    	; 0x542 <__vector_13+0x2e8>

				case 'a' ://DataBuffer[5] = {1,0,1,0,1}; 
					DataBuffer[0] = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 67 00 	sts	0x0067, r25
 466:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 46a:	10 92 69 00 	sts	0x0069, r1
 46e:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 472:	90 93 6b 00 	sts	0x006B, r25
 476:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 47a:	10 92 6d 00 	sts	0x006D, r1
 47e:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 482:	90 93 6f 00 	sts	0x006F, r25
 486:	80 93 6e 00 	sts	0x006E, r24
					break;
 48a:	5b c0       	rjmp	.+182    	; 0x542 <__vector_13+0x2e8>

				case 'b' ://DataBuffer[5] = {1,0,1,1,1};  
					DataBuffer[0] = 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 67 00 	sts	0x0067, r25
 494:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 498:	10 92 69 00 	sts	0x0069, r1
 49c:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 4a0:	90 93 6b 00 	sts	0x006B, r25
 4a4:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 4a8:	90 93 6d 00 	sts	0x006D, r25
 4ac:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 4b0:	90 93 6f 00 	sts	0x006F, r25
 4b4:	80 93 6e 00 	sts	0x006E, r24
					break;
 4b8:	44 c0       	rjmp	.+136    	; 0x542 <__vector_13+0x2e8>

				case 'c' ://DataBuffer[5] = {1,1,0,0,1}; 
					DataBuffer[0] = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	90 93 67 00 	sts	0x0067, r25
 4c2:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 4c6:	90 93 69 00 	sts	0x0069, r25
 4ca:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 4ce:	10 92 6b 00 	sts	0x006B, r1
 4d2:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 4d6:	10 92 6d 00 	sts	0x006D, r1
 4da:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 4de:	90 93 6f 00 	sts	0x006F, r25
 4e2:	80 93 6e 00 	sts	0x006E, r24
					break;
 4e6:	2d c0       	rjmp	.+90     	; 0x542 <__vector_13+0x2e8>

				case 'd' ://DataBuffer[5] = {1,1,0,1,1};
			 
					DataBuffer[0] = 1;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	90 93 67 00 	sts	0x0067, r25
 4f0:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 4f4:	90 93 69 00 	sts	0x0069, r25
 4f8:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 4fc:	10 92 6b 00 	sts	0x006B, r1
 500:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 504:	90 93 6d 00 	sts	0x006D, r25
 508:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 1;
 50c:	90 93 6f 00 	sts	0x006F, r25
 510:	80 93 6e 00 	sts	0x006E, r24
					break;
 514:	16 c0       	rjmp	.+44     	; 0x542 <__vector_13+0x2e8>

				case 'e' :// DataBuffer[5] = {1,1,1,0,1};  
					DataBuffer[0] = 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	90 93 67 00 	sts	0x0067, r25
 51e:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 522:	90 93 69 00 	sts	0x0069, r25
 526:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 52a:	90 93 6b 00 	sts	0x006B, r25
 52e:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 532:	10 92 6d 00 	sts	0x006D, r1
 536:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 1;
 53a:	90 93 6f 00 	sts	0x006F, r25
 53e:	80 93 6e 00 	sts	0x006E, r24
			}
		}

		if (Buffer[2] == '0')
		{
			switch (Buffer[1])
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	f1 97       	sbiw	r30, 0x31	; 49
 54a:	e6 33       	cpi	r30, 0x36	; 54
 54c:	f1 05       	cpc	r31, r1
 54e:	08 f0       	brcs	.+2      	; 0x552 <__vector_13+0x2f8>
 550:	5c c1       	rjmp	.+696    	; 0x80a <__vector_13+0x5b0>
 552:	e1 5a       	subi	r30, 0xA1	; 161
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__tablejump2__>
			{
				case '1' ://DataBuffer[5] = {0,0,0,1,0};
					DataBuffer[0] = 0;
 55a:	10 92 67 00 	sts	0x0067, r1
 55e:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 562:	10 92 69 00 	sts	0x0069, r1
 566:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 56a:	10 92 6b 00 	sts	0x006B, r1
 56e:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	90 93 6d 00 	sts	0x006D, r25
 57a:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 57e:	10 92 6f 00 	sts	0x006F, r1
 582:	10 92 6e 00 	sts	0x006E, r1
					break;
 586:	41 c1       	rjmp	.+642    	; 0x80a <__vector_13+0x5b0>

				case '2' ://DataBuffer[5] = {0,0,1,0,0};
					DataBuffer[0] = 0;
 588:	10 92 67 00 	sts	0x0067, r1
 58c:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 590:	10 92 69 00 	sts	0x0069, r1
 594:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	90 93 6b 00 	sts	0x006B, r25
 5a0:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 5a4:	10 92 6d 00 	sts	0x006D, r1
 5a8:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 5ac:	10 92 6f 00 	sts	0x006F, r1
 5b0:	10 92 6e 00 	sts	0x006E, r1
					break;
 5b4:	2a c1       	rjmp	.+596    	; 0x80a <__vector_13+0x5b0>

				case '3' ://DataBuffer[5] = {0,0,1,1,0};
					DataBuffer[0] = 0;
 5b6:	10 92 67 00 	sts	0x0067, r1
 5ba:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 0;
 5be:	10 92 69 00 	sts	0x0069, r1
 5c2:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	90 93 6b 00 	sts	0x006B, r25
 5ce:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 5d2:	90 93 6d 00 	sts	0x006D, r25
 5d6:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 5da:	10 92 6f 00 	sts	0x006F, r1
 5de:	10 92 6e 00 	sts	0x006E, r1
					break;
 5e2:	13 c1       	rjmp	.+550    	; 0x80a <__vector_13+0x5b0>

				case '4' ://DataBuffer[5] = {0,1,0,0,0};
					DataBuffer[0] = 0;
 5e4:	10 92 67 00 	sts	0x0067, r1
 5e8:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	90 93 69 00 	sts	0x0069, r25
 5f4:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 5f8:	10 92 6b 00 	sts	0x006B, r1
 5fc:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 600:	10 92 6d 00 	sts	0x006D, r1
 604:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 608:	10 92 6f 00 	sts	0x006F, r1
 60c:	10 92 6e 00 	sts	0x006E, r1
					break;
 610:	fc c0       	rjmp	.+504    	; 0x80a <__vector_13+0x5b0>

				case '5' ://DataBuffer[5] = {0,1,0,1,0};
					DataBuffer[0] = 0;
 612:	10 92 67 00 	sts	0x0067, r1
 616:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	90 93 69 00 	sts	0x0069, r25
 622:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 626:	10 92 6b 00 	sts	0x006B, r1
 62a:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 62e:	90 93 6d 00 	sts	0x006D, r25
 632:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 636:	10 92 6f 00 	sts	0x006F, r1
 63a:	10 92 6e 00 	sts	0x006E, r1
					break;
 63e:	e5 c0       	rjmp	.+458    	; 0x80a <__vector_13+0x5b0>

				case '6' ://DataBuffer[5] = {0,1,1,0,0};
					DataBuffer[0] = 0;
 640:	10 92 67 00 	sts	0x0067, r1
 644:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 69 00 	sts	0x0069, r25
 650:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 654:	90 93 6b 00 	sts	0x006B, r25
 658:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 65c:	10 92 6d 00 	sts	0x006D, r1
 660:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 664:	10 92 6f 00 	sts	0x006F, r1
 668:	10 92 6e 00 	sts	0x006E, r1
					break;
 66c:	ce c0       	rjmp	.+412    	; 0x80a <__vector_13+0x5b0>

				case '7' ://DataBuffer[5] = {0,1,1,1,0};
					DataBuffer[0] = 0;
 66e:	10 92 67 00 	sts	0x0067, r1
 672:	10 92 66 00 	sts	0x0066, r1
					DataBuffer[1] = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	90 93 69 00 	sts	0x0069, r25
 67e:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 682:	90 93 6b 00 	sts	0x006B, r25
 686:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 68a:	90 93 6d 00 	sts	0x006D, r25
 68e:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 692:	10 92 6f 00 	sts	0x006F, r1
 696:	10 92 6e 00 	sts	0x006E, r1
					break;
 69a:	b7 c0       	rjmp	.+366    	; 0x80a <__vector_13+0x5b0>

				case '8' :// DataBuffer[5] = {1,0,0,0,0};
					DataBuffer[0] = 1;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	90 93 67 00 	sts	0x0067, r25
 6a4:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 6a8:	10 92 69 00 	sts	0x0069, r1
 6ac:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 6b0:	10 92 6b 00 	sts	0x006B, r1
 6b4:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 6b8:	10 92 6d 00 	sts	0x006D, r1
 6bc:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 6c0:	10 92 6f 00 	sts	0x006F, r1
 6c4:	10 92 6e 00 	sts	0x006E, r1
					break;
 6c8:	a0 c0       	rjmp	.+320    	; 0x80a <__vector_13+0x5b0>

				case '9' ://DataBuffer[5] = {1,0,0,1,0};
					DataBuffer[0] = 1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	90 93 67 00 	sts	0x0067, r25
 6d2:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 6d6:	10 92 69 00 	sts	0x0069, r1
 6da:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 0;
 6de:	10 92 6b 00 	sts	0x006B, r1
 6e2:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 6e6:	90 93 6d 00 	sts	0x006D, r25
 6ea:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 6ee:	10 92 6f 00 	sts	0x006F, r1
 6f2:	10 92 6e 00 	sts	0x006E, r1
					break;
 6f6:	89 c0       	rjmp	.+274    	; 0x80a <__vector_13+0x5b0>

				case 'a' ://DataBuffer[5] = {1,0,1,0,0};
					DataBuffer[0] = 1;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	90 93 67 00 	sts	0x0067, r25
 700:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 704:	10 92 69 00 	sts	0x0069, r1
 708:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 70c:	90 93 6b 00 	sts	0x006B, r25
 710:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 714:	10 92 6d 00 	sts	0x006D, r1
 718:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 71c:	10 92 6f 00 	sts	0x006F, r1
 720:	10 92 6e 00 	sts	0x006E, r1
					break;
 724:	72 c0       	rjmp	.+228    	; 0x80a <__vector_13+0x5b0>

				case 'b' ://DataBuffer[5] = {1,0,1,1,0};
					DataBuffer[0] = 1;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	90 93 67 00 	sts	0x0067, r25
 72e:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 0;
 732:	10 92 69 00 	sts	0x0069, r1
 736:	10 92 68 00 	sts	0x0068, r1
					DataBuffer[2] = 1;
 73a:	90 93 6b 00 	sts	0x006B, r25
 73e:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 742:	90 93 6d 00 	sts	0x006D, r25
 746:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 74a:	10 92 6f 00 	sts	0x006F, r1
 74e:	10 92 6e 00 	sts	0x006E, r1
					break;
 752:	5b c0       	rjmp	.+182    	; 0x80a <__vector_13+0x5b0>

				case 'c' ://DataBuffer[5] = {1,1,0,0,0};
					DataBuffer[0] = 1;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 67 00 	sts	0x0067, r25
 75c:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 760:	90 93 69 00 	sts	0x0069, r25
 764:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 768:	10 92 6b 00 	sts	0x006B, r1
 76c:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 0;
 770:	10 92 6d 00 	sts	0x006D, r1
 774:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 778:	10 92 6f 00 	sts	0x006F, r1
 77c:	10 92 6e 00 	sts	0x006E, r1
					break;
 780:	44 c0       	rjmp	.+136    	; 0x80a <__vector_13+0x5b0>

				case 'd' ://DataBuffer[5] = {1,1,0,1,0};
					DataBuffer[0] = 1;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	90 93 67 00 	sts	0x0067, r25
 78a:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 78e:	90 93 69 00 	sts	0x0069, r25
 792:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 0;
 796:	10 92 6b 00 	sts	0x006B, r1
 79a:	10 92 6a 00 	sts	0x006A, r1
					DataBuffer[3] = 1;
 79e:	90 93 6d 00 	sts	0x006D, r25
 7a2:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 7a6:	10 92 6f 00 	sts	0x006F, r1
 7aa:	10 92 6e 00 	sts	0x006E, r1
					break;
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <__vector_13+0x5b0>

				case 'e' :// DataBuffer[5] = {1,1,1,0,0};
					DataBuffer[0] = 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	90 93 67 00 	sts	0x0067, r25
 7b8:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 7bc:	90 93 69 00 	sts	0x0069, r25
 7c0:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 7c4:	90 93 6b 00 	sts	0x006B, r25
 7c8:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 0;
 7cc:	10 92 6d 00 	sts	0x006D, r1
 7d0:	10 92 6c 00 	sts	0x006C, r1
					DataBuffer[4] = 0;
 7d4:	10 92 6f 00 	sts	0x006F, r1
 7d8:	10 92 6e 00 	sts	0x006E, r1
					break;
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <__vector_13+0x5b0>

				case 'f' ://DataBuffer[5] = {1,1,1,1,0};
					DataBuffer[0] = 1;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	90 93 67 00 	sts	0x0067, r25
 7e6:	80 93 66 00 	sts	0x0066, r24
					DataBuffer[1] = 1;
 7ea:	90 93 69 00 	sts	0x0069, r25
 7ee:	80 93 68 00 	sts	0x0068, r24
					DataBuffer[2] = 1;
 7f2:	90 93 6b 00 	sts	0x006B, r25
 7f6:	80 93 6a 00 	sts	0x006A, r24
					DataBuffer[3] = 1;
 7fa:	90 93 6d 00 	sts	0x006D, r25
 7fe:	80 93 6c 00 	sts	0x006C, r24
					DataBuffer[4] = 0;
 802:	10 92 6f 00 	sts	0x006F, r1
 806:	10 92 6e 00 	sts	0x006E, r1
					break;
			}
		}
	ready = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	90 93 63 00 	sts	0x0063, r25
 812:	80 93 62 00 	sts	0x0062, r24
	}

}
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <main>:


void main()
{
	// Initialize USART (with RX interrupt enable)
	InitUART(9600, 8, 1);
 844:	21 e0       	ldi	r18, 0x01	; 1
 846:	48 e0       	ldi	r20, 0x08	; 8
 848:	60 e8       	ldi	r22, 0x80	; 128
 84a:	75 e2       	ldi	r23, 0x25	; 37
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 2e 04 	call	0x85c	; 0x85c <InitUART>
	// Initialize CTC 
	InitAtmel();
 854:	0e 94 b3 04 	call	0x966	; 0x966 <InitAtmel>
	// Global interrupt enable
	sei();
 858:	78 94       	sei
 85a:	ff cf       	rjmp	.-2      	; 0x85a <main+0x16>

0000085c <InitUART>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char RX_int  )
{
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	52 2f       	mov	r21, r18
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 862:	8b 01       	movw	r16, r22
 864:	9c 01       	movw	r18, r24
 866:	0e 56       	subi	r16, 0x6E	; 110
 868:	11 09       	sbc	r17, r1
 86a:	21 09       	sbc	r18, r1
 86c:	31 09       	sbc	r19, r1
 86e:	03 39       	cpi	r16, 0x93	; 147
 870:	11 4c       	sbci	r17, 0xC1	; 193
 872:	21 40       	sbci	r18, 0x01	; 1
 874:	31 05       	cpc	r19, r1
 876:	80 f5       	brcc	.+96     	; 0x8d8 <__stack+0x79>
 878:	2b ef       	ldi	r18, 0xFB	; 251
 87a:	24 0f       	add	r18, r20
 87c:	24 30       	cpi	r18, 0x04	; 4
 87e:	60 f5       	brcc	.+88     	; 0x8d8 <__stack+0x79>
  { 
    // "Normal" clock, no multiprocesser mode (= default)
    UCSRA = 0b00100000;
 880:	20 e2       	ldi	r18, 0x20	; 32
 882:	2b b9       	out	0x0b, r18	; 11
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRB = 0b00011000;
 884:	28 e1       	ldi	r18, 0x18	; 24
 886:	2a b9       	out	0x0a, r18	; 10
    // Enable RX interrupts if wanted
    if (RX_int)
 888:	51 11       	cpse	r21, r1
      UCSRB |= 0b10000000;
 88a:	57 9a       	sbi	0x0a, 7	; 10
    // Asynchronous operation, 1 stop bit, no parity
    // Bit7 always has to be 1
    // Bit 2 and bit 1 controlles the number of databits
    UCSRC = 0b10000000 | (DataBit-5)<<1;
 88c:	24 2f       	mov	r18, r20
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	25 50       	subi	r18, 0x05	; 5
 892:	31 09       	sbc	r19, r1
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	20 68       	ori	r18, 0x80	; 128
 89a:	20 bd       	out	0x20, r18	; 32
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers seperately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
 89c:	dc 01       	movw	r26, r24
 89e:	cb 01       	movw	r24, r22
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	aa 1f       	adc	r26, r26
 8ae:	bb 1f       	adc	r27, r27
 8b0:	9c 01       	movw	r18, r24
 8b2:	ad 01       	movw	r20, r26
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	70 e4       	ldi	r23, 0x40	; 64
 8c8:	88 e3       	ldi	r24, 0x38	; 56
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 8d0:	21 50       	subi	r18, 0x01	; 1
 8d2:	31 09       	sbc	r19, r1
    // Write upper part of UBRR
    UBRRH = TempUBRR >> 8;
 8d4:	30 bd       	out	0x20, r19	; 32
    // Write lower part of UBRR
    UBRRL = TempUBRR;
 8d6:	29 b9       	out	0x09, r18	; 9
  }  
}
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	08 95       	ret

000008de <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSRA & (1<<7)) == 0 )
 8de:	5f 9b       	sbis	0x0b, 7	; 11
 8e0:	fe cf       	rjmp	.-4      	; 0x8de <ReadChar>
  {}                        
  // Then return it
  return UDR;
 8e2:	8c b1       	in	r24, 0x0c	; 12
}
 8e4:	08 95       	ret

000008e6 <ReadString>:

/**************************************************/


void ReadString(char* Buffer, int MaxLenght)
{
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	8c 01       	movw	r16, r24
 8f4:	7b 01       	movw	r14, r22
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
 8f6:	0e 94 6f 04 	call	0x8de	; 0x8de <ReadChar>
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 8fa:	8d 30       	cpi	r24, 0x0D	; 13
 8fc:	99 f0       	breq	.+38     	; 0x924 <ReadString+0x3e>
 8fe:	1e 14       	cp	r1, r14
 900:	1f 04       	cpc	r1, r15
 902:	84 f4       	brge	.+32     	; 0x924 <ReadString+0x3e>
 904:	f8 01       	movw	r30, r16
 906:	e0 0e       	add	r14, r16
 908:	f1 1e       	adc	r15, r17
 90a:	ef 01       	movw	r28, r30
 90c:	21 96       	adiw	r28, 0x01	; 1
 90e:	8e 01       	movw	r16, r28
	{
		*Buffer++ = NextChar;
 910:	80 83       	st	Z, r24
		StringLenght++;
		NextChar = ReadChar();
 912:	0e 94 6f 04 	call	0x8de	; 0x8de <ReadChar>
	char NextChar;
	int StringLenght=0;
	
	NextChar = ReadChar();
	
	while (NextChar != '\r' && StringLenght < MaxLenght)
 916:	8d 30       	cpi	r24, 0x0D	; 13
 918:	29 f0       	breq	.+10     	; 0x924 <ReadString+0x3e>
 91a:	ce 15       	cp	r28, r14
 91c:	df 05       	cpc	r29, r15
 91e:	11 f0       	breq	.+4      	; 0x924 <ReadString+0x3e>
 920:	fe 01       	movw	r30, r28
 922:	f3 cf       	rjmp	.-26     	; 0x90a <ReadString+0x24>
	{
		*Buffer++ = NextChar;
		StringLenght++;
		NextChar = ReadChar();
	}
	*Buffer = '\0';
 924:	f8 01       	movw	r30, r16
 926:	10 82       	st	Z, r1
}
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	08 95       	ret

00000936 <Burst>:
----------------------------------------------------------------------*/

 
void Burst(void)
{
    DDRB |=(1<<PB3);
 936:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 938:	8d ee       	ldi	r24, 0xED	; 237
 93a:	92 e0       	ldi	r25, 0x02	; 2
 93c:	01 97       	sbiw	r24, 0x01	; 1
 93e:	f1 f7       	brne	.-4      	; 0x93c <Burst+0x6>
 940:	00 c0       	rjmp	.+0      	; 0x942 <Burst+0xc>
 942:	00 00       	nop
    _delay_ms(3);
	DDRB |=(0<<PB3);	   
 944:	87 b3       	in	r24, 0x17	; 23
 946:	87 bb       	out	0x17, r24	; 23
 948:	08 95       	ret

0000094a <__vector_10>:
 1200005
 
---------------------------------------------------------------------*/
#define OCR0_VALUE 14
 ISR(TIMER0_COMP_vect)
 {
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
 954:	8f 93       	push	r24
         OCR0 = (uint8_t)OCR0_VALUE;
 956:	8e e0       	ldi	r24, 0x0E	; 14
 958:	8c bf       	out	0x3c, r24	; 60
 }
 95a:	8f 91       	pop	r24
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

00000966 <InitAtmel>:
CTC - couter initial value
CTC - counter compare interrupt
---------------------------------------------------------------------*/
 void InitAtmel(void)
 {
	 DDRB |= (0<<PB2) | (0<<PB0);
 966:	87 b3       	in	r24, 0x17	; 23
 968:	87 bb       	out	0x17, r24	; 23
	 MCUCSR = 0b01000000;
 96a:	80 e4       	ldi	r24, 0x40	; 64
 96c:	84 bf       	out	0x34, r24	; 52
	 GICR |= 0b00100000;
 96e:	8b b7       	in	r24, 0x3b	; 59
 970:	80 62       	ori	r24, 0x20	; 32
 972:	8b bf       	out	0x3b, r24	; 59
	 TCCR0 = 0b01101001;
 974:	89 e6       	ldi	r24, 0x69	; 105
 976:	83 bf       	out	0x33, r24	; 51
	 TCNT0 = 0;
 978:	12 be       	out	0x32, r1	; 50
	 TIMSK |=(1<<OCIE0);
 97a:	89 b7       	in	r24, 0x39	; 57
 97c:	82 60       	ori	r24, 0x02	; 2
 97e:	89 bf       	out	0x39, r24	; 57
 980:	08 95       	ret

00000982 <__udivmodsi4>:
 982:	a1 e2       	ldi	r26, 0x21	; 33
 984:	1a 2e       	mov	r1, r26
 986:	aa 1b       	sub	r26, r26
 988:	bb 1b       	sub	r27, r27
 98a:	fd 01       	movw	r30, r26
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__udivmodsi4_ep>

0000098e <__udivmodsi4_loop>:
 98e:	aa 1f       	adc	r26, r26
 990:	bb 1f       	adc	r27, r27
 992:	ee 1f       	adc	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	a2 17       	cp	r26, r18
 998:	b3 07       	cpc	r27, r19
 99a:	e4 07       	cpc	r30, r20
 99c:	f5 07       	cpc	r31, r21
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <__udivmodsi4_ep>
 9a0:	a2 1b       	sub	r26, r18
 9a2:	b3 0b       	sbc	r27, r19
 9a4:	e4 0b       	sbc	r30, r20
 9a6:	f5 0b       	sbc	r31, r21

000009a8 <__udivmodsi4_ep>:
 9a8:	66 1f       	adc	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	1a 94       	dec	r1
 9b2:	69 f7       	brne	.-38     	; 0x98e <__udivmodsi4_loop>
 9b4:	60 95       	com	r22
 9b6:	70 95       	com	r23
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	9b 01       	movw	r18, r22
 9be:	ac 01       	movw	r20, r24
 9c0:	bd 01       	movw	r22, r26
 9c2:	cf 01       	movw	r24, r30
 9c4:	08 95       	ret

000009c6 <__tablejump2__>:
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31

000009ca <__tablejump__>:
 9ca:	05 90       	lpm	r0, Z+
 9cc:	f4 91       	lpm	r31, Z
 9ce:	e0 2d       	mov	r30, r0
 9d0:	09 94       	ijmp

000009d2 <_exit>:
 9d2:	f8 94       	cli

000009d4 <__stop_program>:
 9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <__stop_program>
